{"version":3,"sources":["context/DockerRemoteContext.tsx","components/DockerImages/DockerImage.tsx","components/DockerImages/DockerImages.tsx","components/DockerVolumes/DockerVolume.tsx","components/DockerVolumes/DockerVolumes.tsx","components/DockerNetworks/DockerNetwork.tsx","components/DockerNetworks/DockerNetworks.tsx","components/DockerRemoteDetails/DockerRemoteDetails.tsx","components/DockerRemoteList/DockerRemoteList.tsx","components/DockerRemoteForm/DockerRemoteForm.tsx","components/MainNavbar/MainNavbar.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx","api/DockerApi.ts","api/BaseApi.ts","components/DockerContainers/DockerContainers.tsx","components/DockerContainers/DockerContainer.tsx","components/Toast/Toast.tsx"],"names":["DockerRemoteContext","React","createContext","getSavedDockerRemote","savedData","localStorage","getItem","JSON","parse","DockerRemoteContextProvider","state","dockerRemotes","addDockerRemote","newDockerRemote","currentDockerRemotes","host","port","setItem","stringify","setState","removeDockerRemote","dockerRemoteKey","Provider","value","this","props","children","Component","contextType","sizeConverter","size","dimension","toFixed","timeConverter","unixTime","a","Date","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","getSeconds","DockerImage","data","image","fetchImageLs","setImageDetails","useState","loading","setLoading","dockerApi","DockerApi","fromDockerRemoteData","colSpan","Spinner","animation","RepoTags","className","Id","slice","Created","Size","Button","variant","onClick","containerCreate","then","toast","catch","requestErrorToast","disabled","imageInspect","details","imageRm","detailsConverter","imageDetails","undefined","DockerImages","eventKey","currentEventKey","useContext","AccordionContext","imageLs","setImageLs","force","imageElements","map","idx","Card","Accordion","Toggle","as","Header","Collapse","Body","Form","Group","controlId","Label","Control","placeholder","required","input","document","getElementById","inputValue","length","startsWith","contentClassName","imageCreate","scope","Modal","dialogClassName","show","onHide","closeButton","Title","DockerVolume","volume","fetchVolumeLs","setVolumeDetails","Name","Driver","Mountpoint","volumeInpect","volumeRm","DockerVolumes","volumeLs","setVolumeLs","volumeDetails","Volumes","DockerNetwork","network","fetchNetworkLs","setNetworksDetails","Scope","networkInpect","networkRm","DockerNetworks","NetworkLs","setNetworkLs","NetworkDetails","console","log","networkLs","networkElements","id","DockerRemoteDetails","dockerRemoteContextData","params","useParams","dockerRemoteData","DockerContainers","DockerRemoteList","Object","entries","e","key","bg","border","Text","Row","Col","xs","to","DockerRemoteForm","defaultData","strings","placeholderHost","infoTooltip","Tooltip","location","useLocation","history","useHistory","setShow","fail","setFail","success","setSuccess","useTls","setUseTls","useForm","defaultValues","register","handleSubmit","reset","dockerRemoteContext","handleClose","onSubmit","protocol","pathname","push","Check","checked","type","label","onChange","OverlayTrigger","placement","delay","hide","overlay","hostInfoTooltip","portInfoTooltip","valueAsNumber","placeholderPort","Footer","onFail","ping","res","form","MainNavbar","Navbar","expand","Brand","Nav","href","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","all","allLogs","stderr","stdout","tail","error","Error","errMsg","status","statusText","json","errResponse","message","method","queryParams","body","apiRequest","ok","handleError","nameTag","matches","match","fromImage","tag","endsWith","apiRequestWrapper","result","replace","imageName","Image","container","text","response","url","baseUrl","queryStringify","request","headers","Headers","append","options","debug","fetch","obj","str","p","hasOwnProperty","encodeURIComponent","join","containerDetails","logs","containerLs","setContainerLs","setContainerDetails","containerLogs","setContainerLogs","fetchContainerLs","containersElements","name","split","header","Buffer","from","filter","DockerContainer","useRef","useEffect","Names","Status","current","containerRun","containerInspect","containerRestart","containerStop","containerRm","toastComponentList","defaultOptions","time","position","renderDOM","classnames","t","timeout","classNames","component","Toast","clickable","messageDOM","useLayoutEffect","clientHeight","height","style","setTimeout","contentClassNames","Boolean","clickableProps","tabIndex","role","ref","timeOrOptions","Array","isArray","now","index","findIndex","splice","errorMessage"],"mappings":"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","file":"static/js/main.7ded709f.chunk.js","sourcesContent":["import React from \"react\"\nimport { DockerRemoteData, DockerRemoteContextValue, DockerRemoteContextState } from '../types/DockerTypes';\n\nexport const DockerRemoteContext = React.createContext<DockerRemoteContextValue | null>(null);\n\nfunction getSavedDockerRemote() {\n    const savedData = localStorage.getItem('dockerRemote');\n    if (savedData === null)\n        return {}\n    return JSON.parse(savedData);\n}\n\nclass DockerRemoteContextProvider extends React.Component {\n    static override contextType = DockerRemoteContext;\n\n    override state: DockerRemoteContextState = {\n        dockerRemotes: (getSavedDockerRemote() as ({ [key: string]: DockerRemoteData }))\n    }\n\n    addDockerRemote = (newDockerRemote: DockerRemoteData) => {\n        const currentDockerRemotes = this.state.dockerRemotes;\n        currentDockerRemotes[`${newDockerRemote.host}:${newDockerRemote.port}`] = newDockerRemote;\n        localStorage.setItem('dockerRemote', JSON.stringify(currentDockerRemotes));\n        this.setState({ dockerRemotes: currentDockerRemotes });\n    }\n\n    removeDockerRemote = (dockerRemoteKey: string) => {\n        const currentDockerRemotes = this.state.dockerRemotes;\n        delete currentDockerRemotes[dockerRemoteKey];\n        localStorage.setItem('dockerRemote', JSON.stringify(currentDockerRemotes));\n        this.setState({ dockerRemotes: currentDockerRemotes });\n    }\n\n    override render() {\n        return (\n            <DockerRemoteContext.Provider value={{\n                dockerRemotes: this.state.dockerRemotes,\n                addDockerRemote: this.addDockerRemote,\n                removeDockerRemote: this.removeDockerRemote\n            }}>\n                {this.props.children}\n            </DockerRemoteContext.Provider>\n        );\n    }\n}\n\nexport default DockerRemoteContextProvider;","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ImageInfo, ImageInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\n\ninterface Props {\n    key: number\n    data: DockerRemoteData\n    image: ImageInfo\n    fetchImageLs: (force?: boolean) => void\n    setImageDetails: (image: ImageInspectInfo) => void\n}\n\nfunction sizeConverter(size: number) {\n    const dimensions = ['B', 'KB', 'MB', 'GB', 'TB'];\n    for (let dimension of dimensions) {\n        if (size / 1000 < 1)\n            return `${size.toFixed(2)} ${dimension}`;\n        else\n            size /= 1000;\n    }\n    return `${size.toFixed(2)} TB`;\n}\n\nfunction timeConverter(unixTime: number) {\n    const a = new Date(unixTime * 1000);\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n}\n\nfunction DockerImage({ data, image, fetchImageLs, setImageDetails }: Props) {\n    const [loading, setLoading] = useState(false);\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n    const onRun = () => {\n        dockerApi.containerCreate(image)\n            .then(() => toast(\"A new container has been created\"))\n            .catch(requestErrorToast);\n    }\n    const onInspect = () => {\n        dockerApi.imageInspect(image)\n            .then((details) => setImageDetails(details))\n            .catch(requestErrorToast);\n    }\n    const onDelete = () => {\n        dockerApi.imageRm(image)\n            .then(() => fetchImageLs(true))\n            .then(() => toast(\"The image has been deleted\"))\n            .catch(requestErrorToast);\n    }\n\n    return (\n        <tr>\n            {loading && (\n                <td colSpan={5}>\n                    <Spinner animation=\"border\" size=\"sm\" />\n                </td>\n            )}\n            {!loading && (\n                <>\n                    <td>{image.RepoTags}</td>\n                    <td className=\"DockerImages-image-id\">{image.Id.slice(7)}</td>\n                    <td>{timeConverter(image.Created)}</td>\n                    <td>{sizeConverter(image.Size)}</td>\n                    <td className=\"DockerImages-actions\" >\n                        <Button variant=\"success lg\" onClick={onRun} disabled={loading}>\n                            <i className=\"fa fa-play\"></i>\n                        </Button>\n                        <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                            <i className=\"fa fa-eye\"></i>\n                        </Button>\n                        <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </td>\n                </>\n            )}\n        </tr>\n    );\n}\n\nexport default DockerImage;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ImageInfo, ImageInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\nimport DockerImage from \"./DockerImage\";\nimport './DockerImages.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction detailsConverter(imageDetails: ImageInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerImages({ data, eventKey }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [imageLs, setImageLs] = useState<ImageInfo[]>();\n    const [imageDetails, setImageDetails] = useState<ImageInspectInfo>();\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n\n    const fetchImageLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.imageLs().then(setImageLs).catch(requestErrorToast);\n        }\n    }\n    const onPull = () => {\n        const input = (document.getElementById('dockerImages.tag') as HTMLInputElement);\n        const inputValue = input?.value;\n\n        if (inputValue === undefined || inputValue === null || inputValue.length === 0 || inputValue.startsWith(\":\"))\n            return toast(\"You must specify an image name to pull\", { contentClassName: \"text-danger\" })\n\n        input.value = \"\";\n        dockerApi.imageCreate(inputValue)\n            .then(() => toast(\"A new images is being pulled.\\nIt may take a while before it shows here\"))\n            .catch(requestErrorToast);\n    }\n\n    const imageElements = imageLs?.map((image, idx) =>\n        <DockerImage key={idx}\n            data={data}\n            image={image}\n            fetchImageLs={fetchImageLs}\n            setImageDetails={setImageDetails}\n        ></DockerImage>\n    );\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchImageLs()}>\n                    <h5>Images</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <Form.Group className=\"DockerImages-form\" controlId=\"dockerImages.tag\">\n                            <Form.Label className=\"DockerImages-required-label\"><b>Pull image</b></Form.Label>\n                            <Form.Control placeholder=\"tag:latest\" required />\n                            <Button variant=\"primary\" onClick={onPull}>\n                                <i className=\"fa fa-download\"></i>\n                            </Button>\n                        </Form.Group>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && imageLs === undefined && <p>No images found</p>}\n                        {!loading && imageLs && (\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Image ID</th>\n                                        <th scope=\"col\">Created</th>\n                                        <th scope=\"col\">Size</th>\n                                        <th scope=\"col\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {imageElements}\n                                </tbody>\n                            </table>\n                        )}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={imageDetails !== undefined} onHide={() => setImageDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{imageDetails?.RepoTags} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(imageDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerImages;","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { VolumeInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\n\ninterface Props {\n    key: number\n    data: DockerRemoteData\n    volume: VolumeInspectInfo\n    fetchVolumeLs: (force?: boolean) => void\n    setVolumeDetails: (volume: VolumeInspectInfo) => void\n}\n\nfunction DockerVolume({ data, volume, fetchVolumeLs, setVolumeDetails }: Props) {\n    const [loading, setLoading] = useState(false);\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n    const onInspect = () => {\n        dockerApi.volumeInpect(volume)\n            .then((details) => setVolumeDetails(details))\n            .catch(requestErrorToast);\n    }\n    const onDelete = () => {\n        dockerApi.volumeRm(volume)\n            .then(() => fetchVolumeLs(true))\n            .then(() => toast(\"The volume has been deleted\"))\n            .catch(requestErrorToast);\n    }\n\n    return (\n        <tr>\n            {loading && (\n                <td colSpan={4}>\n                    <Spinner animation=\"border\" size=\"sm\" />\n                </td>\n            )}\n            {!loading && (\n                <>\n                    <td className=\"DockerVolumes-name\">{volume.Name}</td>\n                    <td>{volume.Driver}</td>\n                    <td className=\"DockerVolumes-name\">{volume.Mountpoint}</td>\n                    <td className=\"DockerVolumes-actions\" >\n                        <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                            <i className=\"fa fa-eye\"></i>\n                        </Button>\n                        <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </td>\n                </>\n            )}\n        </tr>\n    );\n}\n\nexport default DockerVolume;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { VolumeInspectInfo, VolumeList } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport { requestErrorToast } from \"../Toast/Toast\";\nimport DockerVolume from \"./DockerVolume\";\nimport './DockerVolumes.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction detailsConverter(imageDetails: VolumeInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerVolumes({ data, eventKey }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [volumeLs, setVolumeLs] = useState<VolumeList>();\n    const [volumeDetails, setVolumeDetails] = useState<VolumeInspectInfo>();\n\n    const fetchVolumeLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.volumeLs().then(setVolumeLs).catch(requestErrorToast);\n        }\n    }\n\n    const imageElements = volumeLs?.Volumes.map((volume, idx) =>\n        <DockerVolume key={idx}\n            volume={volume}\n            data={data}\n            fetchVolumeLs={fetchVolumeLs}\n            setVolumeDetails={setVolumeDetails}\n        ></DockerVolume>\n    );\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchVolumeLs()}>\n                    <h5>Volumes</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && volumeLs === undefined && <p>No volumes found</p>}\n                        {!loading && volumeLs && (\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Driver</th>\n                                        <th scope=\"col\">Mountpoint</th>\n                                        <th scope=\"col\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {imageElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={volumeDetails !== undefined} onHide={() => setVolumeDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{volumeDetails?.Name} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(volumeDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerVolumes;","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { NetworkInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\n\ninterface Props {\n    key: number\n    data: DockerRemoteData\n    network: NetworkInspectInfo\n    fetchNetworkLs: (force?: boolean) => void\n    setNetworksDetails: (newtwork: NetworkInspectInfo) => void\n}\n\nfunction DockerNetwork({ data, network, fetchNetworkLs, setNetworksDetails }: Props) {\n    const [loading, setLoading] = useState(false);\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n    const onInspect = () => {\n        dockerApi.networkInpect(network)\n            .then((details) => setNetworksDetails(details))\n            .catch(requestErrorToast)\n    }\n    const onDelete = () => {\n        dockerApi.networkRm(network)\n            .then(() => fetchNetworkLs(true))\n            .then(() => toast(\"The network has been deleted\"))\n            .catch(requestErrorToast)\n    }\n\n    return (\n        <tr>\n            {loading && (\n                <td colSpan={5}>\n                    <Spinner animation=\"border\" size=\"sm\" />\n                </td>\n            )}\n            {!loading && (\n                <>\n                    <td>{network.Name}</td>\n                    <td className=\"DockerNetworks-ellipsis\">{network.Id}</td>\n                    <td>{network.Driver}</td>\n                    <td>{network.Scope}</td>\n                    <td className=\"DockerNetworks-actions\" >\n                        <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                            <i className=\"fa fa-eye\"></i>\n                        </Button>\n                        <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </td>\n                </>\n            )}\n        </tr>\n    );\n}\n\nexport default DockerNetwork;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { NetworkInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport { requestErrorToast } from \"../Toast/Toast\";\nimport DockerNetwork from \"./DockerNetwork\";\nimport './DockerNetworks.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction detailsConverter(imageDetails: NetworkInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerNetworks({ data, eventKey }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [NetworkLs, setNetworkLs] = useState<NetworkInspectInfo[]>();\n    const [NetworkDetails, setNetworksDetails] = useState<NetworkInspectInfo>();\n\n    const fetchNetworkLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            console.log(\"FEST\");\n            dockerApi.networkLs()\n                .then(setNetworkLs)\n                .catch(requestErrorToast);\n        }\n    }\n\n    const networkElements = NetworkLs?.map((network, idx) =>\n        <DockerNetwork key={idx}\n            network={network}\n            data={data}\n            fetchNetworkLs={fetchNetworkLs}\n            setNetworksDetails={setNetworksDetails}\n        ></DockerNetwork>\n    );\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle id=\"acc-networks\" as={Card.Header} eventKey={eventKey} onClick={() => fetchNetworkLs()}>\n                    <h5>Networks</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && NetworkLs === undefined && <p>No networks found</p>}\n                        {!loading && NetworkLs && (\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Network ID</th>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Driver</th>\n                                        <th scope=\"col\">Scope</th>\n                                        <th scope=\"col\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {networkElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={NetworkDetails !== undefined} onHide={() => setNetworksDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{NetworkDetails?.Name} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(NetworkDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerNetworks;","import React, { useContext } from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport { useParams } from 'react-router-dom';\nimport { DockerRemoteContext } from \"../../context/DockerRemoteContext\";\nimport { DockerRemoteKey } from '../../types/DockerTypes';\nimport DockerImages from \"../DockerImages/DockerImages\";\nimport DockerContainers from \"../DockerContainers/DockerContainers\";\nimport DockerVolumes from \"../DockerVolumes/DockerVolumes\";\nimport DockerNetworks from \"../DockerNetworks/DockerNetworks\";\n\nfunction DockerRemoteDetails() {\n    const dockerRemoteContextData = useContext(DockerRemoteContext);\n    const params = useParams<DockerRemoteKey>();\n    const dockerRemoteData = dockerRemoteContextData?.dockerRemotes[params.dockerRemoteKey];\n\n    if (dockerRemoteData === undefined) {\n        return (\n            <>\n                <h3>ERROR 404</h3>\n                <p>The Docker remote you specified was not found</p>\n            </>\n        )\n    }\n\n    return (\n        <>\n        <h4>{`${dockerRemoteData.host}:${dockerRemoteData.port}`}</h4>\n            <Accordion >\n                <DockerImages data={dockerRemoteData} eventKey=\"0\" />\n                <DockerContainers data={dockerRemoteData} eventKey=\"1\"></DockerContainers>\n                <DockerVolumes data={dockerRemoteData} eventKey=\"2\"></DockerVolumes>\n                <DockerNetworks data={dockerRemoteData} eventKey=\"3\"></DockerNetworks>\n            </Accordion>\n        </>\n    );\n}\n\nexport default DockerRemoteDetails;","import React, { useContext } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport { Link } from 'react-router-dom';\nimport { DockerRemoteContext } from \"../../context/DockerRemoteContext\";\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport './DockerRemoteList.css';\n\nfunction DockerRemoteList() {\n    const dockerRemoteContextData = useContext(DockerRemoteContext);\n\n    let dockerRemoteData: [string, DockerRemoteData][] = [];\n    if (dockerRemoteContextData !== null)\n        dockerRemoteData = Object.entries(dockerRemoteContextData.dockerRemotes);\n\n    const dockerRemotes = dockerRemoteData.map(e => {\n        const [key, value] = e;\n        return (\n            <Card bg=\"dark\" key={key} border=\"primary\" className=\"mb-3\">\n                <Card.Header><h5>{`${value.host}:${value.port}`}</h5></Card.Header>\n                <Card.Body>\n                    <Card.Text as={\"div\"}>\n                        <Row>\n                            <Col xs={9}>\n                                Host: <b>{value.host}</b><br></br>\n                                Port: <b>{value.port}</b><br></br>\n                            </Col>\n                            <Col className=\"DockerRemoteList-buttons\" xs={2}>\n                                <Link to={key}>\n                                    <Button variant=\"primary lg\">\n                                        <i className=\"fa fa-eye\"></i>\n                                    </Button>\n                                </Link>\n                                <Button variant=\"danger lg\" onClick={() => dockerRemoteContextData?.removeDockerRemote(key)}>\n                                    <i className=\"fa fa-trash\"></i>\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        )\n    });\n\n    return (\n        <>\n            {dockerRemotes && (\n                <div className=\"DockerRemoteList-CardDeck\">\n                    {dockerRemotes}\n                </div>\n            )}\n            {dockerRemotes.length === 0 && (\n                <p>\n                    No remote Docker instances found :(\n                </p>\n            )}\n        </>\n\n    );\n}\n\nexport default DockerRemoteList;","import React, { useContext, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { DockerRemoteContext } from '../../context/DockerRemoteContext';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport './DockerRemoteForm.css';\nimport strings from './DockerRemoteForm.json';\n\nfunction DockerRemoteForm() {\n    const defaultData = { port: 2375, host: strings.placeholderHost };\n    const infoTooltip = (\n        <Tooltip id=\"infoTooltip\">\n            {strings.infoTooltip}\n        </Tooltip>\n    );\n\n    const location = useLocation();\n    const history = useHistory();\n\n    const [show, setShow] = useState(false);\n    const [fail, setFail] = useState(false);\n    const [success, setSuccess] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [useTls, setUseTls] = useState(true);\n    const { register, handleSubmit, reset } = useForm({ defaultValues: defaultData });\n    const dockerRemoteContext = useContext(DockerRemoteContext);\n\n    const handleOpen = () => setShow(true);\n    const handleClose = () => { setSuccess(false); setFail(false); reset(defaultData); setShow(false); };\n\n    const onTest = (data: DockerRemoteData) => {\n        data.protocol = useTls ? \"https\" : \"http\";\n\n        const onFail = () => {\n            setSuccess(false);\n            setFail(true);\n        }\n\n        const onSuccess = () => {\n            setFail(false);\n            setSuccess(true);\n        }\n\n        const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n        dockerApi.ping()\n            .then((res) => res ? onSuccess() : onFail())\n            .catch(onFail);\n    }\n\n    const onSubmit = (data: DockerRemoteData) => {\n        data.protocol = useTls ? \"https\" : \"http\";\n        dockerRemoteContext?.addDockerRemote(data);\n        handleClose();\n        if (location.pathname !== \"/\")\n            history.push(\"/\");\n    };\n\n    return (\n        <>\n            <Button variant=\"success\" onClick={handleOpen}>\n                <i className=\"fa fa-plus\"></i>&nbsp;&nbsp;\n                Add Docker remote\n            </Button>\n\n            <Modal dialogClassName=\"modal-lg\" show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add a new Docker remote</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n\n                    <Form id=\"dockerRemoteForm\" onSubmit={handleSubmit(onSubmit)}>\n                        <Row>\n                            <Col xs={11}>\n                                <Form.Group controlId=\"dockerRemoteForm.local\">\n                                    <Form.Check\n                                        checked={useTls}\n                                        type=\"switch\"\n                                        id=\"dockerRemoteForm.local\"\n                                        label={useTls ? \"Using HTTPS\" : \"Using HTTP\"}\n                                        onChange={() => setUseTls(!useTls)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                            <Col xs={1}>\n                                <OverlayTrigger placement=\"left\" delay={{ show: 150, hide: 300 }} overlay={infoTooltip}>\n                                    <i className=\"fa fa-2x fa-question-circle\"></i>\n                                </OverlayTrigger>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col xs=\"6\">\n                                <Form.Group controlId=\"dockerRemoteForm.host\">\n                                    <Form.Label className=\"DockerRemoteForm-required-label info-tooltip\">Remote hostname or IP address\n                                        <span className=\"tooltip-text\">{strings.hostInfoTooltip}</span>\n                                    </Form.Label>\n                                    <Form.Control {...register(\"host\")} type=\"text\" placeholder={strings.placeholderHost} required />\n                                </Form.Group>\n                            </Col>\n                            <Col xs=\"3\">\n                                <Form.Group controlId=\"dockerRemoteForm.port\">\n                                    <Form.Label className=\"DockerRemoteForm-required-label info-tooltip\">Remote port\n                                        <span className=\"tooltip-text\">{strings.portInfoTooltip}</span>\n                                    </Form.Label>\n                                    <Form.Control {...register(\"port\", { valueAsNumber: true })} type=\"number\" placeholder={strings.placeholderPort} required />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    {fail && !loading && (\n                        <p className=\"text-danger\">Could not connect to the Docker remote daemon</p>\n                    )}\n                    {success && !loading && (\n                        <p className=\"text-success\">Connection successfully enstablished</p>\n                    )}\n\n                    <Button variant=\"warning\" onClick={handleSubmit(onTest)} disabled={loading}>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && \"Test connection\"}\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" form=\"dockerRemoteForm\">\n                        Add\n                    </Button>\n                </Modal.Footer>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerRemoteForm;","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Link } from 'react-router-dom';\nimport DockerRemoteForm from \"../DockerRemoteForm/DockerRemoteForm\";\nimport './MainNav.css';\n\nfunction MainNavbar() {\n    return (\n        <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand><Link className=\"navbar-brand\" to=\"/\">Whale watch</Link></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <DockerRemoteForm></DockerRemoteForm>\n                </Nav>\n                <Button href=\"https://github.com/TendTo/Whale-watch\" variant=\"outline-light\"><i className=\"fa fa-github\"></i></Button>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default MainNavbar;","import React from 'react';\nimport {\n  HashRouter as Router, Route, Switch\n} from 'react-router-dom';\nimport DockerRemoteContextProvider from '../../context/DockerRemoteContext';\nimport DockerRemoteDetails from '../DockerRemoteDetails/DockerRemoteDetails';\nimport DockerRemoteList from '../DockerRemoteList/DockerRemoteList';\nimport MainNavbar from '../MainNavbar/MainNavbar';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <DockerRemoteContextProvider>\n          <MainNavbar></MainNavbar>\n          <div className=\"App-main\">\n            <Switch>\n              <Route exact path=\"/\" children={<DockerRemoteList />} />\n              <Route exact path=\"/:dockerRemoteKey\" children={<DockerRemoteDetails />} />\n            </Switch>\n          </div>\n        </DockerRemoteContextProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './bootstrap.css';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { DockerRemoteData } from '../types/DockerTypes'\nimport { ImageInfo, NetworkInspectInfo, ImageRemoveInfo, ImageInspectInfo, ServiceCreateResponse, ContainerInfo, ContainerInspectInfo, VolumeInspectInfo, VolumeList } from '../types/DockerApiTypes'\nimport BaseApi from './BaseApi';\n\ntype queryParams = {\n    [key: string]: any\n}\n\nclass DockerApi extends BaseApi {\n    private readonly force = { force: \"true\" };\n    private readonly all = { all: \"true\" };\n    private readonly allLogs = { stderr: \"true\", stdout: \"true\", tail: 100 };\n\n    static fromDockerRemoteData(data: DockerRemoteData, setLoading: (isLoading: boolean) => void) {\n        return new DockerApi(data.protocol, data.host, data.port, setLoading);\n    }\n\n    constructor(\n        protocol: \"https\" | \"http\",\n        host: string,\n        port: number,\n        public setLoading?: (isLoading: boolean) => void\n    ) {\n        super(protocol, host, port);\n    }\n\n    protected override async handleError(error: Response) {\n        if (error === undefined || error === null) throw Error(\"No response\");\n        let errMsg: string = error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        try {\n            const errResponse = await error.json() as {message: string};\n            errMsg = errResponse.message || errMsg;\n        } catch (e) { }\n        throw Error(errMsg);\n    }\n\n    private async apiRequestWrapper(path: string, method: string = \"GET\", queryParams?: queryParams, body?: queryParams) {\n        if (this.setLoading) this.setLoading(true);\n        try {\n            const res = await this.apiRequest(path, method, queryParams, body);\n            if (res === undefined || res === null || !res.ok) await this.handleError(res);\n            if (this.setLoading) this.setLoading(false);\n            return res;\n        } catch (e) {\n            if (this.setLoading) this.setLoading(false);\n            throw e;\n        }\n    }\n\n    async imageCreate(nameTag: string): Promise<void> {\n        const matches = nameTag.match(/(.*?)(:[^:]+)?$/);\n        if (matches === null || matches.length < 2) {\n            throw Error(\"404 - imageCreate has failed\");\n        }\n        let fromImage = matches[1] || \"\";\n        let tag = matches[2] || \"latest\";\n        fromImage = fromImage.endsWith(\":\") ? fromImage.slice(0, -1) : fromImage;\n        tag = tag.startsWith(\":\") ? tag.slice(1) : tag;\n        await this.apiRequestWrapper(\"images/create\", \"POST\", { fromImage: fromImage, tag: tag });\n    }\n\n    async imageLs(): Promise<ImageInfo[]> {\n        const result = await this.apiRequestWrapper(\"images/json\");\n        return await result.json();\n    }\n\n    async imageInspect(image: ImageInfo): Promise<ImageInspectInfo> {\n        const result = await this.apiRequestWrapper(`images/${image.Id.replace(\"sha256:\", \"\")}/json`);\n        return await result.json();\n    }\n\n    async imageRm(image: ImageInfo): Promise<ImageRemoveInfo[]> {\n        const result = await this.apiRequestWrapper(`images/${image.Id.replace(\"sha256:\", \"\")}`, \"DELETE\", this.force);\n        return await result.json();\n    }\n\n    async containerCreate(image: ImageInfo): Promise<ServiceCreateResponse> {\n        const imageName = image.RepoTags ? image.RepoTags[0] : image.Id.slice(7);\n        const result = await this.apiRequestWrapper(`containers/create`, \"POST\", undefined, { Image: imageName });\n        return await result.json();\n    }\n\n    async containerRun(container: ContainerInfo): Promise<void> {\n        await this.apiRequestWrapper(`containers/${container.Id}/start`, \"POST\");\n    }\n\n    async containerLs(...params: { key: string, value: string }[]): Promise<ContainerInfo[]> {\n        const result = await this.apiRequestWrapper(`containers/json`, \"GET\", this.all);\n        return await result.json();\n    }\n\n    async containerInspect(container: ContainerInfo): Promise<ContainerInspectInfo> {\n        const result = await this.apiRequestWrapper(`containers/${container.Id}/json`);\n        return await result.json();\n    }\n\n    async containerLogs(container: ContainerInfo): Promise<string> {\n        const result = await this.apiRequestWrapper(`containers/${container.Id}/logs`, \"GET\", this.allLogs);\n        return await result.text();\n    }\n\n    async containerRestart(container: ContainerInfo): Promise<void> {\n        await this.apiRequestWrapper(`containers/${container.Id}/restart`, \"POST\");\n    }\n\n    async containerStop(container: ContainerInfo): Promise<void> {\n        await this.apiRequestWrapper(`containers/${container.Id}/stop`, \"POST\");\n    }\n\n    async containerRm(container: ContainerInfo): Promise<void> {\n        await this.apiRequestWrapper(`containers/${container.Id}`, \"DELETE\", this.force);\n    }\n\n    async volumeLs(...params: { key: string, value: string }[]): Promise<VolumeList> {\n        const result = await this.apiRequestWrapper(`volumes`);\n        return await result.json();\n    }\n\n    async volumeInpect(volume: VolumeInspectInfo): Promise<VolumeInspectInfo> {\n        const result = await this.apiRequestWrapper(`volumes/${volume.Name}`);\n        return await result.json();\n    }\n\n    async volumeRm(volume: VolumeInspectInfo): Promise<void> {\n        await this.apiRequestWrapper(`volumes/${volume.Name}`, \"DELETE\", this.force);\n    }\n\n    async ping(): Promise<boolean> {\n        const result = await this.apiRequestWrapper(`_ping`);\n        const response = await result.text();\n        return response === \"OK\";\n    }\n\n    async networkLs(...params: { key: string, value: string }[]): Promise<NetworkInspectInfo[]> {\n        const result = await this.apiRequestWrapper(`networks`);\n        return await result.json();\n    }\n\n    async networkInpect(network: NetworkInspectInfo): Promise<NetworkInspectInfo> {\n        const result = await this.apiRequestWrapper(`networks/${network.Name}`);\n        return await result.json();\n    }\n\n    async networkRm(network: NetworkInspectInfo): Promise<void> {\n        await this.apiRequestWrapper(`networks/${network.Name}`, \"DELETE\");\n    }\n}\n\nexport default DockerApi;","export type genericObject = {\n    [key: string]: any\n};\n\nclass BaseApi {\n    constructor(public protocol: \"https\" | \"http\", public host: string, public port: number) { }\n\n    get baseUrl(): string {\n        return `${this.protocol}://${this.host}${this.port ? \":\" + this.port : \"\"}`\n    }\n\n    protected apiRequest(path?: string, method: string = \"GET\", queryParams?: genericObject, body?: genericObject) {\n        let url = path ? `${this.baseUrl}/${path}` : this.baseUrl;\n        if (queryParams) {\n            url += `?${this.queryStringify(queryParams)}`;\n        }\n        return this.request(url, method, body);\n    }\n\n    private request(url: string, method: string = \"GET\", body?: genericObject) {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let options: RequestInit = { headers: headers, method: method };\n        if (body) {\n            options.body = JSON.stringify(body);\n        }\n\n        console.debug(`Fetch - ${method} - ${url}`);\n        return fetch(url, options);\n    }\n\n    protected handleError(error: Response) {\n        if (error === undefined || error === null) throw Error(\"No response\");\n        const errMsg = error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg);\n        throw Error(errMsg);\n    }\n\n    private queryStringify(obj: genericObject) {\n        let str = [];\n        for (let p in obj) {\n            if (obj.hasOwnProperty(p) && obj[p] !== null && obj[p] !== undefined) {\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join(\"&\");\n    }\n}\nexport default BaseApi;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ContainerInfo, ContainerInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport { requestErrorToast } from \"../Toast/Toast\";\nimport DockerContainer from \"./DockerContainer\";\nimport './DockerContainers.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction detailsConverter(containerDetails: ContainerInspectInfo | undefined) {\n    if (containerDetails === undefined)\n        return \"\"\n    return JSON.stringify(containerDetails, null, 4);\n}\n\nfunction logsConverter(logs: string | undefined) {\n    if (logs === undefined)\n        return \"\"\n    return logs.split(\"\\n\")\n        .map(e => ({ header: Buffer.from(e.slice(0, 8)), text: e }))\n        .filter(({ header, text }) => header[0] !== 0)\n        .map(({ header, text }, idx) =>\n            <p key={idx} className={`DockerContainers-logs ${header[0] === 2 ? \"text-danger\" : \"\"}`}>{header[0] === 1 || header[0] === 2 ? text.slice(8) : text}</p>\n        )\n}\n\nfunction DockerContainers({ data, eventKey }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [containerLs, setContainerLs] = useState<ContainerInfo[]>();\n    const [containerDetails, setContainerDetails] = useState<ContainerInspectInfo>();\n    const [containerLogs, setContainerLogs] = useState<{ name: string, logs: string }>();\n\n    const fetchContainerLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.containerLs().then(setContainerLs).catch(requestErrorToast);\n        }\n    }\n\n    const containersElements = containerLs?.map((container, idx) =>\n        <DockerContainer key={idx}\n            container={container}\n            data={data}\n            fetchContainerLs={fetchContainerLs}\n            setContainerDetails={setContainerDetails}\n            setContainerLogs={setContainerLogs}\n        ></DockerContainer>\n    );\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchContainerLs()}>\n                    <h5>Containers</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && containerLs === undefined && <p>No containers found</p>}\n                        {!loading && containerLs && (\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Image Tag</th>\n                                        <th scope=\"col\">Created</th>\n                                        <th scope=\"col\">Status</th>\n                                        <th scope=\"col\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {containersElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={containerDetails !== undefined} onHide={() => setContainerDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{containerDetails?.Name.slice(1)} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(containerDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n            <Modal dialogClassName=\"modal-lg\" show={containerLogs !== undefined} onHide={() => setContainerLogs(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{containerLogs?.name.slice(1)} logs</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {logsConverter(containerLogs?.logs)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerContainers;","import React, { useEffect, useRef, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ContainerInfo, ContainerInspectInfo } from \"../../types/DockerApiTypes\";\nimport { DockerRemoteData } from \"../../types/DockerTypes\";\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\n\ntype ContainerLogs = { name: string, logs: string }\n\ninterface Props {\n    key: number\n    data: DockerRemoteData\n    container: ContainerInfo\n    fetchContainerLs: (force?: boolean) => void\n    setContainerDetails: (container: ContainerInspectInfo) => void\n    setContainerLogs: (logs: ContainerLogs) => void\n}\n\nfunction timeConverter(unixTime: number) {\n    const a = new Date(unixTime * 1000);\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n}\n\nfunction DockerContainer({ data, container, fetchContainerLs, setContainerDetails, setContainerLogs }: Props) {\n    const [loading, setLoading] = useState(false);\n    const dockerApi = useRef(DockerApi.fromDockerRemoteData(data, setLoading));\n\n    useEffect(() => {\n        DockerApi.fromDockerRemoteData(data, setLoading)\n    }, [data, setLoading]);\n\n    const onRun = () => {\n        dockerApi.current.containerRun(container)\n            .then(() => fetchContainerLs(true))\n            .then(() => toast(\"A new container has started running\"))\n            .catch(requestErrorToast);\n    }\n    const onInspect = () => {\n        dockerApi.current.containerInspect(container)\n            .then(setContainerDetails)\n            .catch(requestErrorToast);\n    }\n    const onLogs = () => {\n        dockerApi.current.containerLogs(container)\n            .then((logs) => setContainerLogs({ name: container.Names ? container.Names[0] : container.Id, logs: logs }))\n            .catch(requestErrorToast);\n    }\n    const onRestart = () => {\n        dockerApi.current.containerRestart(container)\n            .then(() => fetchContainerLs(true))\n            .then(() => toast(\"The container has been restarted\"))\n            .catch(requestErrorToast);\n    }\n    const onStop = () => {\n        dockerApi.current.containerStop(container)\n            .then(() => fetchContainerLs(true))\n            .then(() => toast(\"The container has been stopped\"))\n            .catch(requestErrorToast);\n    }\n    const onDelete = () => {\n        dockerApi.current.containerRm(container)\n            .then(() => fetchContainerLs(true))\n            .then(() => toast(\"The container has been deleted\"))\n            .catch(requestErrorToast);\n    }\n\n    return (\n        <tr>\n            {loading && (\n                <td colSpan={5}>\n                    <Spinner animation=\"border\" size=\"sm\" />\n                </td>\n            )}\n            {!loading && (\n                <>\n                    <td>{container.Names.map(e => e.slice(1))}</td>\n                    <td>{container.Image}</td>\n                    <td>{timeConverter(container.Created)}</td>\n                    <td>{container.Status}</td>\n                    <td className=\"DockerContainers-actions\" >\n                        <Button variant=\"success lg\" onClick={onRun} disabled={loading}>\n                            <i className=\"fa fa-play\"></i>\n                        </Button>\n                        <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                            <i className=\"fa fa-eye\"></i>\n                        </Button>\n                        <Button variant=\"light lg\" onClick={onLogs} disabled={loading}>\n                            <i className=\"fa fa-file-text-o\"></i>\n                        </Button>\n                        <Button variant=\"primary lg\" onClick={onRestart} disabled={loading}>\n                            <i className=\"fa fa-refresh\"></i>\n                        </Button>\n                        <Button variant=\"warning lg\" onClick={onStop} disabled={loading}>\n                            <i className=\"fa fa-stop\"></i>\n                        </Button>\n                        <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </td>\n                </>\n            )}\n        </tr>\n    );\n}\n\nexport default DockerContainer;","import React, { ReactElement, SyntheticEvent, useLayoutEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Toast.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nexport interface ToastOptions {\n  time?: number;\n  className?: string;\n  clickable?: boolean;\n  contentClassName?: string;\n  onClick?: (e: SyntheticEvent<HTMLDivElement>) => void | Promise<void>;\n}\n\nexport interface ConfigArgs extends Pick<ToastOptions, 'time' | 'className'> {\n  position?: 'left' | 'center' | 'right';\n}\n\nexport interface ToastProps extends Pick<ToastOptions, 'className' | 'clickable' | 'onClick' | 'contentClassName'> {\n  message: string;\n}\n\nlet toastComponentList: any[] = [];\nconst init = () => {\n  const toastContainer = document.getElementById('toast_container');\n  if (!toastContainer) {\n    console.error(\"No toast_container element\")\n  }\n  if (!toastComponentList || !Array.isArray(toastComponentList)) {\n    toastComponentList = [];\n  }\n};\n\nconst defaultOptions: Required<ConfigArgs> = {\n  time: 3000,\n  className: '',\n  position: 'center',\n};\n\nexport const toastConfig = (options: ConfigArgs) => {\n  if (options.time) defaultOptions.time = options.time;\n  if (options.className) defaultOptions.className = options.className;\n  if (options.position) defaultOptions.position = options.position;\n};\n\nconst renderDOM = () => {\n  const container = document.getElementById('toast_container');\n  const position = defaultOptions.position || 'center';\n\n  ReactDOM.render(\n    <div className={`toast-list ${position}`}>\n      <TransitionGroup classnames=\"list\">\n        {toastComponentList.map(t => (\n          <CSSTransition key={t.id} timeout={300} classNames=\"toast\">\n            {t.component}\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>,\n    container,\n  );\n};\n\nconst Toast = ({\n  message,\n  className,\n  contentClassName,\n  clickable,\n  onClick,\n}: ToastProps): ReactElement => {\n  const messageDOM: any = useRef();\n\n  useLayoutEffect(() => {\n    if (messageDOM.current && messageDOM.current.clientHeight) {\n      const height = messageDOM.current.clientHeight;\n      messageDOM.current.style.height = '0px';\n      setTimeout(() => {\n        if (messageDOM && messageDOM.current)\n          messageDOM.current.style.height = `${height}px`;\n      }, 0);\n    }\n  });\n\n  const contentClassNames = [\n    'toast-content',\n    clickable ? 'clickable' : '',\n    contentClassName\n  ].filter(Boolean).join(' ');\n\n  const clickableProps = {\n    onClick,\n    tabIndex: 0,\n    role: 'button',\n  };\n\n  return (\n    <div ref={messageDOM} className={`toast-message ${className}`}>\n      <div\n        className={contentClassNames}\n        {...clickable && clickableProps}\n      >\n        {message}\n      </div>\n    </div>\n  );\n};\n\nfunction toast(message: string, time?: number): void;\nfunction toast(message: string, options?: ToastOptions): void;\nfunction toast(message: string, timeOrOptions?: number | ToastOptions): void {\n  const {\n    time = defaultOptions.time,\n    clickable = false,\n    className = defaultOptions.className,\n    contentClassName = \"\",\n    onClick = undefined,\n  } = typeof timeOrOptions === 'number' ? { time: timeOrOptions } : (timeOrOptions || {});\n\n  init();\n  renderDOM();\n\n  const id = Date.now();\n  toastComponentList.push({\n    id,\n    component: (\n      <Toast\n        message={message}\n        className={className}\n        clickable={clickable}\n        onClick={onClick}\n        contentClassName={contentClassName}\n      />\n    ),\n  });\n\n  renderDOM();\n  setTimeout(() => {\n    const index = toastComponentList.findIndex(t => t.id === id);\n    toastComponentList.splice(index, 1);\n    renderDOM();\n  }, time);\n}\n\nexport function requestErrorToast(e: Error) {\n  console.error(e);\n  let contentClassName = \"text-danger\";\n  let errorMessage = \"An error has occurred.\";\n  switch (e.message.slice(0, 3)) {\n    case \"304\":\n      errorMessage = \"Nothing has changed.\"\n      contentClassName = \"text-warning\"\n      break;\n    case \"403\":\n      errorMessage = \"Forbidden operation.\"\n      break;\n    case \"404\":\n      errorMessage = \"Resource not found.\"\n      break;\n    case \"409\":\n      errorMessage = \"A conflict has emerged.\"\n      break;\n  }\n  toast(`${errorMessage}\\nCheck the logs to know more`, { contentClassName: contentClassName });\n}\n\nexport default toast;"],"sourceRoot":""}