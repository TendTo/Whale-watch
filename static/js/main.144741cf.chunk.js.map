{"version":3,"sources":["components/DockerContainers/DockerContainers.tsx","context/DockerRemoteContext.tsx","components/DockerImages/DockerImages.tsx","components/DockerVolumes/DockerVolumes.tsx","components/DockerNetworks/DockerNetworks.tsx","components/DockerRemoteDetails/DockerRemoteDetails.tsx","components/DockerRemoteList/DockerRemoteList.tsx","components/DockerRemoteForm/DockerRemoteForm.tsx","components/MainNavbar/MainNavbar.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx","components/Toast/Toast.tsx","api/DockerApi.tsx"],"names":["onError","e","console","error","errorMessage","message","slice","toast","contentClassName","timeConverter","unixTime","a","Date","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","getSeconds","detailsConverter","containerDetails","undefined","JSON","stringify","DockerContainers","logs","data","eventKey","currentEventKey","useContext","AccordionContext","useState","loading","setLoading","containerLs","setContainerLs","setContainerDetails","containerLogs","setContainerLogs","dockerApi","DockerApi","fromDockerRemoteData","fetchContainerLs","force","then","catch","containersElements","map","container","idx","Names","Image","Created","Status","className","variant","onClick","containerRun","containerInspect","name","Id","containerRestart","containerStop","containerRm","Toggle","as","Card","Header","Collapse","Body","animation","size","scope","dialogClassName","show","onHide","closeButton","Title","Name","split","header","Buffer","from","text","filter","DockerRemoteContext","React","createContext","getSavedDockerRemote","savedData","localStorage","getItem","parse","DockerRemoteContextProvider","state","dockerRemotes","addDockerRemote","newDockerRemote","currentDockerRemotes","host","port","setItem","setState","removeDockerRemote","dockerRemoteKey","Provider","value","this","props","children","Component","contextType","sizeConverter","dimension","toFixed","imageDetails","DockerImages","imageLs","setImageLs","setImageDetails","fetchImageLs","imageElements","image","RepoTags","Size","Button","containerCreate","imageInspect","details","imageRm","Accordion","Form","Group","controlId","Label","Control","placeholder","required","input","document","getElementById","inputValue","length","startsWith","imageCreate","Spinner","Modal","DockerVolumes","volumeLs","setVolumeLs","volumeDetails","setVolumeDetails","fetchVolumeLs","Volumes","volume","Driver","Mountpoint","volumeInpect","volumeRm","DockerNetworks","NetworkLs","setNetworkLs","NetworkDetails","setNetworksDetails","fetchNetworkLs","networkLs","networkElements","network","Scope","networkInpect","networkRm","DockerRemoteDetails","dockerRemoteContextData","params","useParams","dockerRemoteData","showPem","lines","DockerRemoteList","Object","entries","key","bg","border","Text","Row","Col","xs","ca","cert","to","DockerRemoteForm","defaultData","socket","infoTooltip","Tooltip","id","strings","location","useLocation","history","useHistory","setShow","fail","setFail","success","setSuccess","useTls","setUseTls","useForm","defaultValues","register","handleSubmit","reset","dockerRemoteContext","local","handleClose","backdrop","keyboard","onSubmit","protocol","pathname","push","Check","checked","type","label","onChange","OverlayTrigger","placement","delay","hide","overlay","placeholderHost","valueAsNumber","placeholderPort","rows","placeholderCa","placeholderCert","placeholderKey","Footer","onFail","ping","res","form","MainNavbar","Navbar","expand","Brand","Nav","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","toastComponentList","defaultOptions","time","position","renderDOM","classnames","t","timeout","classNames","component","Toast","clickable","messageDOM","useRef","useLayoutEffect","current","clientHeight","height","style","setTimeout","contentClassNames","Boolean","join","clickableProps","tabIndex","role","ref","timeOrOptions","Array","isArray","now","index","findIndex","splice","all","allLogs","stderr","stdout","tail","baseAddr","method","body","url","baseUrl","fetch","headers","result","parsedBody","options","hostname","byteLength","promise","Promise","resolve","reject","req","https","request","setEncoding","responseBody","on","chunk","response","status","statusCode","json","err","write","end","endpoint","queyParams","debug","_httpsRequest","_httpRequest","_apiRequest","Error","resultObj","nameTag","matches","match","fromImage","endsWith","tag","apiRequest","apiRequestJson","replace","imageName","apiRequestText"],"mappings":"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","file":"static/js/main.144741cf.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ContainerInfo, ContainerInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast from \"../Toast/Toast\";\nimport './DockerContainers.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction onError(e: Error) {\n    console.error(e);\n    let errorMessage = \"An error has occurred.\";\n    switch (e.message.slice(0, 3)) {\n        case \"403\":\n            errorMessage = \"Forbidden operation.\"\n            break;\n        case \"404\":\n            errorMessage = \"Resource not found.\"\n            break;\n        case \"409\":\n            errorMessage = \"A conflict has emerged.\"\n            break;\n    }\n    toast(`${errorMessage}\\nCheck the logs to know more`, { contentClassName: \"text-danger\" });\n}\n\nfunction timeConverter(unixTime: number) {\n    const a = new Date(unixTime * 1000);\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n}\n\nfunction detailsConverter(containerDetails: ContainerInspectInfo | undefined) {\n    if (containerDetails === undefined)\n        return \"\"\n    return JSON.stringify(containerDetails, null, 4);\n}\n\nfunction logsConverter(logs: string | undefined) {\n    if (logs === undefined)\n        return \"\"\n    return logs.split(\"\\n\")\n        .map(e => ({ header: Buffer.from(e.slice(0, 8)), text: e }))\n        .filter(({ header, text }) => header[0] !== 0)\n        .map(({ header, text }, idx) =>\n            <p key={idx} className={`DockerContainers-logs ${header[0] === 2 ? \"text-danger\" : \"\"}`}>{header[0] === 1 || header[0] === 2 ? text.slice(8) : text}</p>\n        )\n}\n\nfunction DockerContainers({ data, eventKey }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [containerLs, setContainerLs] = useState<ContainerInfo[]>();\n    const [containerDetails, setContainerDetails] = useState<ContainerInspectInfo>();\n    const [containerLogs, setContainerLogs] = useState<{ name: string, logs: string }>();\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n    const fetchContainerLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.containerLs().then(setContainerLs).catch(onError);\n        }\n    }\n\n    const containersElements = containerLs?.map((container, idx) => {\n        const onRun = () => {\n            dockerApi.containerRun(container)\n                .then(() => fetchContainerLs(true))\n                .then(() => toast(\"A new container has started running\"))\n                .catch(onError);\n        }\n        const onInspect = () => {\n            dockerApi.containerInspect(container)\n                .then(setContainerDetails)\n                .catch(onError);\n        }\n        const onLogs = () => {\n            dockerApi.containerLogs(container)\n                .then((logs) => setContainerLogs({ name: container.Names ? container.Names[0] : container.Id, logs: logs }))\n                .catch(onError);\n        }\n        const onRestart = () => {\n            dockerApi.containerRestart(container)\n                .then(() => fetchContainerLs(true))\n                .then(() => toast(\"The container has been restarted\"))\n                .catch(onError);\n        }\n        const onStop = () => {\n            dockerApi.containerStop(container)\n                .then(() => fetchContainerLs(true))\n                .then(() => toast(\"The container has been stopped\"))\n                .catch(onError);\n        }\n        const onDelete = () => {\n            dockerApi.containerRm(container)\n                .then(() => fetchContainerLs(true))\n                .then(() => toast(\"The container has been deleted\"))\n                .catch(onError);\n        }\n\n        return (\n            <tr key={idx}>\n                <td>{container.Names.map(e => e.slice(1))}</td>\n                <td>{container.Image}</td>\n                <td>{timeConverter(container.Created)}</td>\n                <td>{container.Status}</td>\n                <td className=\"DockerContainers-actions\" >\n                    <Button variant=\"success lg\" onClick={onRun}>\n                        <i className=\"fa fa-play\"></i>\n                    </Button>\n                    <Button variant=\"info lg\" onClick={onInspect}>\n                        <i className=\"fa fa-eye\"></i>\n                    </Button>\n                    <Button variant=\"light lg\" onClick={onLogs}>\n                        <i className=\"fa fa-file-text-o\"></i>\n                    </Button>\n                    <Button variant=\"primary lg\" onClick={onRestart}>\n                        <i className=\"fa fa-refresh\"></i>\n                    </Button>\n                    <Button variant=\"warning lg\" onClick={onStop}>\n                        <i className=\"fa fa-stop\"></i>\n                    </Button>\n                    <Button variant=\"danger lg\" onClick={onDelete}>\n                        <i className=\"fa fa-trash\"></i>\n                    </Button>\n                </td>\n            </tr>\n        );\n    });\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchContainerLs()}>\n                    <h5>Containers</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && containerLs === undefined && <p>No containers found</p>}\n                        {!loading && containerLs && (\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Image Tag</th>\n                                        <th scope=\"col\">Created</th>\n                                        <th scope=\"col\">Status</th>\n                                        <th scope=\"col\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {containersElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={containerDetails !== undefined} onHide={() => setContainerDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{containerDetails?.Name.slice(1)} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(containerDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n            <Modal dialogClassName=\"modal-lg\" show={containerLogs !== undefined} onHide={() => setContainerLogs(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{containerLogs?.name.slice(1)} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {logsConverter(containerLogs?.logs)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerContainers;","import React from \"react\"\nimport { DockerRemoteData, DockerRemoteContextValue, DockerRemoteContextState } from '../types/DockerTypes';\n\nexport const DockerRemoteContext = React.createContext<DockerRemoteContextValue | null>(null);\n\nfunction getSavedDockerRemote() {\n    const savedData = localStorage.getItem('dockerRemote');\n    if (savedData === null)\n        return {}\n    return JSON.parse(savedData);\n}\n\nclass DockerRemoteContextProvider extends React.Component {\n    static override contextType = DockerRemoteContext;\n\n    override state: DockerRemoteContextState = {\n        dockerRemotes: (getSavedDockerRemote() as ({ [key: string]: DockerRemoteData }))\n    }\n\n    addDockerRemote = (newDockerRemote: DockerRemoteData) => {\n        const currentDockerRemotes = this.state.dockerRemotes;\n        currentDockerRemotes[`${newDockerRemote.host}:${newDockerRemote.port}`] = newDockerRemote;\n        localStorage.setItem('dockerRemote', JSON.stringify(currentDockerRemotes));\n        this.setState({ dockerRemotes: currentDockerRemotes });\n    }\n\n    removeDockerRemote = (dockerRemoteKey: string) => {\n        const currentDockerRemotes = this.state.dockerRemotes;\n        delete currentDockerRemotes[dockerRemoteKey];\n        localStorage.setItem('dockerRemote', JSON.stringify(currentDockerRemotes));\n        this.setState({ dockerRemotes: currentDockerRemotes });\n    }\n\n    override render() {\n        return (\n            <DockerRemoteContext.Provider value={{\n                dockerRemotes: this.state.dockerRemotes,\n                addDockerRemote: this.addDockerRemote,\n                removeDockerRemote: this.removeDockerRemote\n            }}>\n                {this.props.children}\n            </DockerRemoteContext.Provider>\n        );\n    }\n}\n\nexport default DockerRemoteContextProvider;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ImageInfo, ImageInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast from \"../Toast/Toast\";\nimport './DockerImages.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction onError(e: Error) {\n    console.error(e);\n    let errorMessage = \"An error has occurred.\";\n    switch (e.message.slice(0, 3)) {\n        case \"403\":\n            errorMessage = \"Forbidden operation.\"\n            break;\n        case \"404\":\n            errorMessage = \"Resource not found.\"\n            break;\n        case \"409\":\n            errorMessage = \"A conflict has emerged.\"\n            break;\n    }\n    toast(`${errorMessage}\\nCheck the logs to know more`, { contentClassName: \"text-danger\" });\n}\n\nfunction sizeConverter(size: number) {\n    const dimensions = ['B', 'KB', 'MB', 'GB', 'TB'];\n    for (let dimension of dimensions) {\n        if (size / 1000 < 1)\n            return `${size.toFixed(2)} ${dimension}`;\n        else\n            size /= 1000;\n    }\n    return `${size.toFixed(2)} TB`;\n}\n\nfunction timeConverter(unixTime: number) {\n    const a = new Date(unixTime * 1000);\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n}\n\nfunction detailsConverter(imageDetails: ImageInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerImages({ data, eventKey }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [imageLs, setImageLs] = useState<ImageInfo[]>();\n    const [imageDetails, setImageDetails] = useState<ImageInspectInfo>();\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n\n    const fetchImageLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.imageLs().then(setImageLs).catch(onError);\n        }\n    }\n    const onPull = () => {\n        const input = (document.getElementById('dockerImages.tag') as HTMLInputElement);\n        const inputValue = input?.value;\n        \n        if (inputValue === undefined || inputValue === null || inputValue.length === 0 || inputValue.startsWith(\":\"))\n            return toast(\"You must specify an image name to pull\", { contentClassName: \"text-danger\" })\n        \n        input.value = \"\";\n        dockerApi.imageCreate(inputValue)\n            .then(() => toast(\"A new images is being pulled.\\nIt may take a while before it shows here\"))\n            .catch(onError);\n    }\n\n    const imageElements = imageLs?.map((image, idx) => {\n        const onRun = () => {\n            dockerApi.containerCreate(image)\n                .then(() => toast(\"A new container has been created\"))\n                .catch(onError);\n        }\n        const onInspect = () => {\n            dockerApi.imageInspect(image)\n                .then((details) => setImageDetails(details))\n                .catch(onError);\n        }\n        const onDelete = () => {\n            dockerApi.imageRm(image)\n                .then(() => fetchImageLs(true))\n                .then(() => toast(\"The image has been deleted\"))\n                .catch(onError);\n        }\n\n        return (\n            <tr key={idx}>\n                <td>{image.RepoTags}</td>\n                <td className=\"DockerImages-image-id\">{image.Id}</td>\n                <td>{timeConverter(image.Created)}</td>\n                <td>{sizeConverter(image.Size)}</td>\n                <td className=\"DockerImages-actions\" >\n                    <Button variant=\"success lg\" onClick={onRun}>\n                        <i className=\"fa fa-play\"></i>\n                    </Button>\n                    <Button variant=\"info lg\" onClick={onInspect}>\n                        <i className=\"fa fa-eye\"></i>\n                    </Button>\n                    <Button variant=\"danger lg\" onClick={onDelete}>\n                        <i className=\"fa fa-trash\"></i>\n                    </Button>\n                </td>\n            </tr>\n        );\n    });\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchImageLs()}>\n                    <h5>Images</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <Form.Group className=\"DockerImages-form\" controlId=\"dockerImages.tag\">\n                            <Form.Label className=\"DockerImages-required-label\"><b>Pull image</b></Form.Label>\n                            <Form.Control placeholder=\"tag:latest\" required />\n                            <Button variant=\"primary\" onClick={onPull}>\n                                <i className=\"fa fa-download\"></i>\n                            </Button>\n                        </Form.Group>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && imageLs === undefined && <p>No images found</p>}\n                        {!loading && imageLs && (\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Image ID</th>\n                                        <th scope=\"col\">Created</th>\n                                        <th scope=\"col\">Size</th>\n                                        <th scope=\"col\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {imageElements}\n                                </tbody>\n                            </table>\n                        )}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={imageDetails !== undefined} onHide={() => setImageDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{imageDetails?.RepoTags} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(imageDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerImages;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { VolumeInspectInfo, VolumeList } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast from \"../Toast/Toast\";\nimport './DockerVolumes.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction onError(e: Error) {\n    console.error(e);\n    let errorMessage = \"An error has occurred.\";\n    switch (e.message.slice(0, 3)) {\n        case \"403\":\n            errorMessage = \"Forbidden operation.\"\n            break;\n        case \"404\":\n            errorMessage = \"Resource not found.\"\n            break;\n        case \"409\":\n            errorMessage = \"A conflict has emerged.\"\n            break;\n    }\n    toast(`${errorMessage}\\nCheck the logs to know more`, { contentClassName: \"text-danger\" });\n}\n\nfunction detailsConverter(imageDetails: VolumeInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerVolumes({ data, eventKey }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [volumeLs, setVolumeLs] = useState<VolumeList>();\n    const [volumeDetails, setVolumeDetails] = useState<VolumeInspectInfo>();\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n\n    const fetchVolumeLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.volumeLs().then(setVolumeLs).catch(onError);\n        }\n    }\n\n    const imageElements = volumeLs?.Volumes.map((volume, idx) => {\n        const onInspect = () => {\n            dockerApi.volumeInpect(volume)\n                .then((details) => setVolumeDetails(details))\n                .catch(onError);\n        }\n        const onDelete = () => {\n            dockerApi.volumeRm(volume)\n                .then(() => fetchVolumeLs(true))\n                .then(() => toast(\"The volume has been deleted\"))\n                .catch(onError);\n        }\n\n        return (\n            <tr key={idx}>\n                <td className=\"DockerVolumes-name\">{volume.Name}</td>\n                <td>{volume.Driver}</td>\n                <td className=\"DockerVolumes-name\">{volume.Mountpoint}</td>\n                <td className=\"DockerVolumes-actions\" >\n                    <Button variant=\"info lg\" onClick={onInspect}>\n                        <i className=\"fa fa-eye\"></i>\n                    </Button>\n                    <Button variant=\"danger lg\" onClick={onDelete}>\n                        <i className=\"fa fa-trash\"></i>\n                    </Button>\n                </td>\n            </tr>\n        );\n    });\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchVolumeLs()}>\n                    <h5>Volumes</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && volumeLs === undefined && <p>No images found</p>}\n                        {!loading && volumeLs && (\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Driver</th>\n                                        <th scope=\"col\">Mountpoint</th>\n                                        <th scope=\"col\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {imageElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={volumeDetails !== undefined} onHide={() => setVolumeDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{volumeDetails?.Name} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(volumeDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerVolumes;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { NetworkInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast from \"../Toast/Toast\";\nimport './DockerNetworks.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction onError(e: Error) {\n    console.error(e);\n    let errorMessage = \"An error has occurred.\";\n    switch (e.message.slice(0, 3)) {\n        case \"403\":\n            errorMessage = \"Forbidden operation.\"\n            break;\n        case \"404\":\n            errorMessage = \"Resource not found.\"\n            break;\n        case \"409\":\n            errorMessage = \"A conflict has emerged.\"\n            break;\n    }\n    toast(`${errorMessage}\\nCheck the logs to know more`, { contentClassName: \"text-danger\" });\n}\n\nfunction detailsConverter(imageDetails: NetworkInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerNetworks({ data, eventKey }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [NetworkLs, setNetworkLs] = useState<NetworkInspectInfo[]>();\n    const [NetworkDetails, setNetworksDetails] = useState<NetworkInspectInfo>();\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n\n    const fetchNetworkLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.networkLs()\n                .then(setNetworkLs)\n                .catch(onError);\n        }\n    }\n\n    const networkElements = NetworkLs?.map((network, idx) => {\n        const onInspect = () => {\n            dockerApi.networkInpect(network)\n                .then((details) => setNetworksDetails(details))\n                .catch(onError)\n        }\n        const onDelete = () => {\n            dockerApi.networkRm(network)\n                .then(() => fetchNetworkLs(true))\n                .then(() => toast(\"The network has been deleted\"))\n                .catch(onError)\n        }\n\n        return (\n            <tr key={idx}>\n                <td>{network.Name}</td>\n                <td className=\"DockerNetworks-ellipsis\">{network.Id}</td>\n                <td>{network.Driver}</td>\n                <td>{network.Scope}</td>\n                <td className=\"DockerNetworks-actions\" >\n                    <Button variant=\"info lg\" onClick={onInspect}>\n                        <i className=\"fa fa-eye\"></i>\n                    </Button>\n                    <Button variant=\"danger lg\" onClick={onDelete}>\n                        <i className=\"fa fa-trash\"></i>\n                    </Button>\n                </td>\n            </tr>\n        );\n    });\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchNetworkLs()}>\n                    <h5>Networks</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && NetworkLs === undefined && <p>No images found</p>}\n                        {!loading && NetworkLs && (\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">Network ID</th>\n                                        <th scope=\"col\">Name</th>\n                                        <th scope=\"col\">Driver</th>\n                                        <th scope=\"col\">Scope</th>\n                                        <th scope=\"col\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {networkElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={NetworkDetails !== undefined} onHide={() => setNetworksDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{NetworkDetails?.Name} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(NetworkDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerNetworks;","import React, { useContext } from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport { useParams } from 'react-router-dom';\nimport { DockerRemoteContext } from \"../../context/DockerRemoteContext\";\nimport { DockerRemoteKey } from '../../types/DockerTypes';\nimport DockerImages from \"../DockerImages/DockerImages\";\nimport DockerContainers from \"../DockerContainers/DockerContainers\";\nimport DockerVolumes from \"../DockerVolumes/DockerVolumes\";\nimport DockerNetworks from \"../DockerNetworks/DockerNetworks\";\n\nfunction DockerRemoteDetails() {\n    const dockerRemoteContextData = useContext(DockerRemoteContext);\n    const params = useParams<DockerRemoteKey>();\n    const dockerRemoteData = dockerRemoteContextData?.dockerRemotes[params.dockerRemoteKey];\n\n    if (dockerRemoteData === undefined) {\n        return (\n            <>\n                <h3>ERROR 404</h3>\n                <p>The Docker remote you specified was not found</p>\n            </>\n        )\n    }\n\n    return (\n        <>\n        <h4>{`${dockerRemoteData.host}:${dockerRemoteData.port}`}</h4>\n            <Accordion >\n                <DockerImages data={dockerRemoteData} eventKey=\"0\" />\n                <DockerContainers data={dockerRemoteData} eventKey=\"1\"></DockerContainers>\n                <DockerVolumes data={dockerRemoteData} eventKey=\"2\"></DockerVolumes>\n                <DockerNetworks data={dockerRemoteData} eventKey=\"3\"></DockerNetworks>\n            </Accordion>\n        </>\n    );\n}\n\nexport default DockerRemoteDetails;","import React, { useContext } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport { Link } from 'react-router-dom';\nimport { DockerRemoteContext } from \"../../context/DockerRemoteContext\";\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport './DockerRemoteList.css';\n\n/**\n * Shows some minimal informations to check if the .pem file provided by the user is correct\n * @param value value among the .pem files provided by the user\n * @returns first 7 letters used to identify the .pem file\n */\nfunction showPem(value: string) {\n    const lines = value.split(\"\\n\");\n    if (lines.length < 2) {\n        return value.slice(0, 7);\n    }\n    return lines[1].slice(0, 7);\n}\n\nfunction DockerRemoteList() {\n    const dockerRemoteContextData = useContext(DockerRemoteContext);\n\n    let dockerRemoteData: [string, DockerRemoteData][] = [];\n    if (dockerRemoteContextData !== null)\n        dockerRemoteData = Object.entries(dockerRemoteContextData.dockerRemotes);\n\n    const dockerRemotes = dockerRemoteData.map(e => {\n        const [key, value] = e;\n        return (\n            <Card bg=\"dark\" key={key} border=\"primary\" className=\"mb-3\">\n                <Card.Header><h5>{`${value.host}:${value.port}`}</h5></Card.Header>\n                <Card.Body>\n                    <Card.Text as={\"div\"}>\n                        <Row>\n                            <Col xs={9}>\n                                Host: <b>{value.host}</b><br></br>\n                                Port: <b>{value.port}</b><br></br>\n                                {value.ca && (<>Certificate Authority: <b>{showPem(value.ca)}</b><br></br></>)}\n                                {value.cert && (<>Certificate: <b>{showPem(value.cert)}</b><br></br></>)}\n                                {value.key && (<>Key: <b>{showPem(value.key)}</b><br></br></>)}\n                            </Col>\n                            <Col className=\"DockerRemoteList-buttons\" xs={2}>\n                                <Link to={key}>\n                                    <Button variant=\"primary lg\">\n                                        <i className=\"fa fa-eye\"></i>\n                                    </Button>\n                                </Link>\n                                <Button variant=\"danger lg\" onClick={() => dockerRemoteContextData?.removeDockerRemote(key)}>\n                                    <i className=\"fa fa-trash\"></i>\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        )\n    });\n\n    return (\n        <>\n            {dockerRemotes && (\n                <div className=\"DockerRemoteList-CardDeck\">\n                    {dockerRemotes}\n                </div>\n            )}\n            {dockerRemotes.length === 0 && (\n                <p>\n                    No remote Docker instances found :(\n                </p>\n            )}\n        </>\n\n    );\n}\n\nexport default DockerRemoteList;","import React, { useContext, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { DockerRemoteContext } from '../../context/DockerRemoteContext';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport './DockerRemoteForm.css';\nimport strings from './DockerRemoteForm.json';\n\nfunction DockerRemoteForm() {\n    const defaultData = {\n        socket: \"/var/run/docker.sock\", port: 2375, host: \"192.168.1.18\",\n        ca: \"\",\n        cert: \"\",\n        key: \"\"\n    };\n    const infoTooltip = (\n        <Tooltip id=\"infoTooltip\">\n            {strings.infoTooltip}\n        </Tooltip>\n    );\n\n    const location = useLocation();\n    const history = useHistory();\n\n    const [show, setShow] = useState(false);\n    const [fail, setFail] = useState(false);\n    const [success, setSuccess] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [useTls, setUseTls] = useState(true);\n    const { register, handleSubmit, reset } = useForm({ defaultValues: defaultData });\n    const dockerRemoteContext = useContext(DockerRemoteContext);\n    const local = false;\n\n    const handleOpen = () => setShow(true);\n    const handleClose = () => { setSuccess(false); setFail(false); reset(defaultData); setShow(false); };\n\n    const onTest = (data: DockerRemoteData) => {\n        data.protocol = useTls ? \"https\" : \"http\";\n\n        const onFail = () => {\n            setSuccess(false);\n            setFail(true);\n        }\n\n        const onSuccess = () => {\n            setFail(false);\n            setSuccess(true);\n        }\n\n        const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n        dockerApi.ping()\n            .then((res) => res ? onSuccess() : onFail())\n            .catch(onFail);\n    }\n\n    const onSubmit = (data: DockerRemoteData) => {\n        data.protocol = useTls ? \"https\" : \"http\";\n        dockerRemoteContext?.addDockerRemote(data);\n        handleClose();\n        if (location.pathname !== \"/\")\n            history.push(\"/\");\n    };\n\n    return (\n        <>\n            <Button variant=\"primary\" onClick={handleOpen}>\n                Add Docker remote\n            </Button>\n\n            <Modal dialogClassName=\"modal-lg\" backdrop=\"static\" keyboard={false} show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add a new Docker remote</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n\n                    <Form id=\"dockerRemoteForm\" onSubmit={handleSubmit(onSubmit)}>\n                        <Row>\n                            <Col xs={11}>\n                                <Form.Group controlId=\"dockerRemoteForm.local\">\n                                    <Form.Check\n                                        checked={useTls}\n                                        type=\"switch\"\n                                        id=\"dockerRemoteForm.local\"\n                                        label={useTls ? \"Using HTTPS\" : \"Using HTTP\"}\n                                        onChange={() => setUseTls(!useTls)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                            <Col xs={1}>\n                                <OverlayTrigger placement=\"left\" delay={{ show: 150, hide: 300 }} overlay={infoTooltip}>\n                                    <i className=\"fa fa-2x fa-question-circle\"></i>\n                                </OverlayTrigger>\n                            </Col>\n                        </Row>\n                        {!local && (\n                            <>\n                                <Row>\n                                    <Col xs=\"6\">\n                                        <Form.Group controlId=\"dockerRemoteForm.host\">\n                                            <Form.Label className=\"DockerRemoteForm-required-label\">Remote hostname or IP address</Form.Label>\n                                            <Form.Control {...register(\"host\")} type=\"text\" placeholder={strings.placeholderHost} required={!local} />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col xs=\"3\">\n                                        <Form.Group controlId=\"dockerRemoteForm.port\">\n                                            <Form.Label className=\"DockerRemoteForm-required-label\">Remote port</Form.Label>\n                                            <Form.Control {...register(\"port\", { valueAsNumber: true })} type=\"number\" placeholder={strings.placeholderPort} required={!local} />\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                {\n                                    useTls && (<>\n                                        <Form.Group controlId=\"dockerRemoteForm.ca\">\n                                            <Form.Label>Certificate Authority (ca.pem)</Form.Label>\n                                            <Form.Control {...register(\"ca\")} as=\"textarea\" rows={4} placeholder={strings.placeholderCa} />\n                                        </Form.Group>\n                                        <Form.Group controlId=\"dockerRemoteForm.cert\">\n                                            <Form.Label>Certificate (cert.pem)</Form.Label>\n                                            <Form.Control {...register(\"cert\")} as=\"textarea\" rows={4} placeholder={strings.placeholderCert} />\n                                        </Form.Group>\n                                        <Form.Group controlId=\"dockerRemoteForm.key\">\n                                            <Form.Label>Key (key.pem)</Form.Label>\n                                            <Form.Control {...register(\"key\")} as=\"textarea\" rows={4} placeholder={strings.placeholderKey} />\n                                        </Form.Group>\n                                    </>)\n                                }\n\n                            </>\n                        )}\n                        {local && (\n                            <>\n                                <Form.Group controlId=\"dockerRemoteForm.socket\">\n                                    <Form.Label>Socket path</Form.Label>\n                                    <Form.Control {...register(\"socket\")} type=\"text\" placeholder={strings.placeholderSocket} required={local} />\n                                </Form.Group>\n                            </>\n                        )}\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    {fail && !loading && (\n                        <p className=\"text-danger\">Could not connect to the Docker remote daemon</p>\n                    )}\n                    {success && !loading && (\n                        <p className=\"text-success\">Connection successfully enstablished</p>\n                    )}\n\n                    <Button variant=\"warning\" onClick={handleSubmit(onTest)}>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && \"Test connection\"}\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" form=\"dockerRemoteForm\">\n                        Add\n                    </Button>\n                </Modal.Footer>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerRemoteForm;","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Link } from 'react-router-dom';\nimport DockerRemoteForm from \"../DockerRemoteForm/DockerRemoteForm\";\n\nfunction MainNavbar() {\n    return (\n        <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand><Link className=\"navbar-brand\" to=\"/\">Whale watch</Link></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <DockerRemoteForm></DockerRemoteForm>\n                </Nav>\n                <Button variant=\"outline-light\"><i className=\"fa fa-github\"></i></Button>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default MainNavbar;","import React from 'react';\nimport {\n  HashRouter as Router, Route, Switch\n} from 'react-router-dom';\nimport DockerRemoteContextProvider from '../../context/DockerRemoteContext';\nimport DockerRemoteDetails from '../DockerRemoteDetails/DockerRemoteDetails';\nimport DockerRemoteList from '../DockerRemoteList/DockerRemoteList';\nimport MainNavbar from '../MainNavbar/MainNavbar';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <DockerRemoteContextProvider>\n          <MainNavbar></MainNavbar>\n          <div className=\"App-main\">\n            <Switch>\n              <Route exact path=\"/\" children={<DockerRemoteList />} />\n              <Route exact path=\"/:dockerRemoteKey\" children={<DockerRemoteDetails />} />\n            </Switch>\n          </div>\n        </DockerRemoteContextProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './bootstrap.css';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { ReactElement, SyntheticEvent, useLayoutEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Toast.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nexport interface ToastOptions {\n  time?: number;\n  className?: string;\n  clickable?: boolean;\n  contentClassName?: string;\n  onClick?: (e: SyntheticEvent<HTMLDivElement>) => void | Promise<void>;\n}\n\nexport interface ConfigArgs extends Pick<ToastOptions, 'time' | 'className'> {\n  position?: 'left' | 'center' | 'right';\n}\n\nexport interface ToastProps extends Pick<ToastOptions, 'className' | 'clickable' | 'onClick' | 'contentClassName'> {\n  message: string;\n}\n\nlet toastComponentList: any[] = [];\nconst init = () => {\n  const toastContainer = document.getElementById('toast_container');\n  if (!toastContainer) {\n    console.error(\"No toast_container element\")\n  }\n  if (!toastComponentList || !Array.isArray(toastComponentList)) {\n    toastComponentList = [];\n  }\n};\n\nconst defaultOptions: Required<ConfigArgs> = {\n  time: 3000,\n  className: '',\n  position: 'center',\n};\n\nexport const toastConfig = (options: ConfigArgs) => {\n  if (options.time) defaultOptions.time = options.time;\n  if (options.className) defaultOptions.className = options.className;\n  if (options.position) defaultOptions.position = options.position;\n};\n\nconst renderDOM = () => {\n  const container = document.getElementById('toast_container');\n  const position = defaultOptions.position || 'center';\n\n  ReactDOM.render(\n    <div className={`toast-list ${position}`}>\n      <TransitionGroup classnames=\"list\">\n        {toastComponentList.map(t => (\n          <CSSTransition key={t.id} timeout={300} classNames=\"toast\">\n            {t.component}\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>,\n    container,\n  );\n};\n\nconst Toast = ({\n  message,\n  className,\n  contentClassName,\n  clickable,\n  onClick,\n}: ToastProps): ReactElement => {\n  const messageDOM: any = useRef();\n\n  useLayoutEffect(() => {\n    if (messageDOM.current && messageDOM.current.clientHeight) {\n      const height = messageDOM.current.clientHeight;\n      messageDOM.current.style.height = '0px';\n      setTimeout(() => {\n        if (messageDOM && messageDOM.current)\n          messageDOM.current.style.height = `${height}px`;\n      }, 0);\n    }\n  });\n\n  const contentClassNames = [\n    'toast-content',\n    clickable ? 'clickable' : '',\n    contentClassName\n  ].filter(Boolean).join(' ');\n\n  const clickableProps = {\n    onClick,\n    tabIndex: 0,\n    role: 'button',\n  };\n\n  return (\n    <div ref={messageDOM} className={`toast-message ${className}`}>\n      <div\n        className={contentClassNames}\n        {...clickable && clickableProps}\n      >\n        {message}\n      </div>\n    </div>\n  );\n};\n\nfunction toast(message: string, time?: number): void;\nfunction toast(message: string, options?: ToastOptions): void;\nfunction toast(message: string, timeOrOptions?: number | ToastOptions): void {\n  const {\n    time = defaultOptions.time,\n    clickable = false,\n    className = defaultOptions.className,\n    contentClassName = \"\",\n    onClick = undefined,\n  } = typeof timeOrOptions === 'number' ? { time: timeOrOptions } : (timeOrOptions || {});\n\n  init();\n  renderDOM();\n\n  const id = Date.now();\n  toastComponentList.push({\n    id,\n    component: (\n      <Toast\n        message={message}\n        className={className}\n        clickable={clickable}\n        onClick={onClick}\n        contentClassName={contentClassName}\n      />\n    ),\n  });\n\n  renderDOM();\n  setTimeout(() => {\n    const index = toastComponentList.findIndex(t => t.id === id);\n    toastComponentList.splice(index, 1);\n    renderDOM();\n  }, time);\n}\n\nexport default toast;","import https from 'https'\nimport { DockerRemoteData, FetchMethod, QueryParams, HttpsResponse } from '../types/DockerTypes'\nimport { ImageInfo, NetworkInspectInfo, ImageRemoveInfo, ImageInspectInfo, ServiceCreateResponse, ContainerInfo, ContainerInspectInfo, VolumeInspectInfo, VolumeList } from '../types/DockerApiTypes'\n\nclass DockerApi {\n    private force = { force: \"true\" };\n    private all = { all: \"true\" };\n    private allLogs = { stderr: \"true\", stdout: \"true\", tail: 100 };\n    protocol: \"https\" | \"http\"\n    host: string\n    port: number\n    ca?: string\n    cert?: string\n    key?: string\n    setLoading: (isLoading: boolean) => void\n\n    static fromDockerRemoteData(data: DockerRemoteData, setLoading: (isLoading: boolean) => void) {\n        return new DockerApi(data.protocol, data.host, data.port, setLoading, data.ca, data.cert, data.key);\n    }\n\n    constructor(protocol: \"https\" | \"http\", host: string, port: number, setLoading: (isLoading: boolean) => void, ca?: string, cert?: string, key?: string) {\n        this.protocol = protocol\n        this.host = host;\n        this.port = port;\n        this.ca = ca;\n        this.cert = cert;\n        this.key = key;\n        this.setLoading = setLoading;\n    }\n\n    get baseAddr(): string {\n        return `${this.host}:${this.port}`;\n    }\n\n    get baseUrl(): string {\n        return `${this.protocol}://${this.baseAddr}`;\n    }\n\n    private async _httpRequest(path: string, method: FetchMethod = \"GET\", body?: object) {\n        const url = `${this.baseUrl}${path}`;\n        const result = await fetch(url, {\n            method: method,\n            headers: body ? {\n                'Content-Type': 'application/json'\n            } : {},\n            body: body ? JSON.stringify(body) : undefined\n        });\n        return result;\n    }\n\n    private async _httpsRequest(path: string, method: FetchMethod = \"GET\", body?: object) {\n        const parsedBody = JSON.stringify(body);\n        const options = {\n            hostname: this.host,\n            port: this.port,\n            path: path,\n            method: method,\n            key: this.key,\n            cert: this.cert,\n            ca: this.ca,\n            headers: body ? {\n                'Content-Type': 'application/json',\n                'Content-Length': Buffer.byteLength(parsedBody)\n            } : undefined,\n        };\n\n        const promise: Promise<HttpsResponse> = new Promise((resolve, reject) => {\n            const req = https.request(options, (res) => {\n                res.setEncoding('utf8');\n                let responseBody = '';\n\n                res.on('data', (chunk) => {\n                    responseBody += chunk;\n                });\n\n                res.on('end', () => {\n                    const response = {\n                        status: res.statusCode,\n                        text: () => responseBody,\n                        json: () => JSON.parse(responseBody)\n                    }\n                    resolve(response);\n                });\n            });\n\n            req.on('error', (err) => {\n                reject(err);\n            });\n            if (body)\n                req.write(parsedBody);\n            req.end();\n        });\n        return await promise;\n    }\n\n    private async _apiRequest(endpoint: string, method: FetchMethod = \"GET\", body?: object, queyParams?: QueryParams) {\n        try {\n            this.setLoading(true);\n            const path = queyParams\n                ? `/${endpoint}?${(Object.entries(queyParams)).map(([key, value]) => `${key}=${value}`).join(\"&\")}`\n                : `/${endpoint}`\n            console.debug(`Request to ${this.baseUrl}${path} endpoint`);\n            if (this.protocol === \"https\")\n                return await this._httpsRequest(path, method, body);\n            else\n                return await this._httpRequest(path, method, body);\n        } catch (e) {\n            this.setLoading(false);\n            console.error(e);\n            return null;\n        }\n    }\n\n    async apiRequest(endpoint: string, method: FetchMethod = \"GET\", body?: object, queyParams?: QueryParams) {\n        const result = await this._apiRequest(endpoint, method, body, queyParams);\n        this.setLoading(false);\n        if (result === null || result?.status === undefined || result?.status >= 400)\n            throw Error(`${result?.status} - apiRequest failed`);\n    }\n\n    async apiRequestJson(endpoint: string, method: FetchMethod = \"GET\", body?: object, queyParams?: QueryParams) {\n        const result = await this._apiRequest(endpoint, method, body, queyParams);\n        if (result === null || result?.status === undefined || result?.status >= 400)\n            throw Error(`${result?.status} - apiRequestJson failed`);\n        const resultObj = await result?.json();\n        this.setLoading(false);\n        return resultObj;\n    }\n\n    async apiRequestText(endpoint: string, method: FetchMethod = \"GET\", body?: object, queyParams?: QueryParams) {\n        const result = await this._apiRequest(endpoint, method, body, queyParams);\n        if (result === null || result?.status === undefined || result?.status >= 400)\n            throw Error(`${result?.status} - apiRequestText failed`);\n        const resultObj = await result?.text();\n        this.setLoading(false);\n        return resultObj;\n    }\n\n    async imageCreate(nameTag: string, ...params: { key: string, value: string }[]): Promise<void> {\n        const matches = nameTag.match(/(.*?)(:[^:]+)?$/);\n        if (matches === null || matches.length < 2) {\n            throw Error(\"404 - imageCreate has failed\");\n        }\n        let fromImage = matches[1] || \"\";\n        fromImage = fromImage.endsWith(\":\") ? fromImage.slice(0, -1) : fromImage;\n        const tag = matches[2] || \"latest\";\n        await this.apiRequest(\"images/create\", \"POST\", undefined, { fromImage: fromImage, tag: tag });\n    }\n\n    async imageLs(...params: { key: string, value: string }[]): Promise<ImageInfo[]> {\n        const result = await this.apiRequestJson(\"images/json\");\n        if (result === null)\n            throw Error('imageLs has failed');\n        return result;\n    }\n\n    async imageInspect(image: ImageInfo, ...params: { key: string, value: string }[]): Promise<ImageInspectInfo> {\n        const result = await this.apiRequestJson(`images/${image.Id.replace(\"sha256:\", \"\")}/json`);\n        if (result === null)\n            throw Error('imageInspect has failed');\n        return result;\n    }\n\n    async imageRm(image: ImageInfo, ...params: { key: string, value: string }[]): Promise<ImageRemoveInfo[]> {\n        const result = await this.apiRequestJson(`images/${image.Id.replace(\"sha256:\", \"\")}`, \"DELETE\", undefined, this.force);\n        if (result === null)\n            throw Error('imageRm has failed');\n        return result;\n    }\n\n    async containerCreate(image: ImageInfo, ...params: { key: string, value: string }[]): Promise<ServiceCreateResponse> {\n        const imageName = image.RepoTags ? image.RepoTags[0] : image.Id.replace(\"sha256:\", \"\");\n        const result = await this.apiRequestJson(`containers/create`, \"POST\", { Image: imageName });\n        if (result === null)\n            throw Error('containerCreate has failed');\n        return result;\n    }\n\n    async containerRun(container: ContainerInfo, ...params: { key: string, value: string }[]): Promise<void> {\n        await this.apiRequest(`containers/${container.Id}/start`, \"POST\");\n    }\n\n    async containerLs(...params: { key: string, value: string }[]): Promise<ContainerInfo[]> {\n        const result = await this.apiRequestJson(`containers/json`, undefined, undefined, this.all);\n        if (result === null)\n            throw Error('containerLs has failed');\n        return result;\n    }\n\n    async containerInspect(container: ContainerInfo, ...params: { key: string, value: string }[]): Promise<ContainerInspectInfo> {\n        const result = await this.apiRequestJson(`containers/${container.Id}/json`);\n        if (result === null)\n            throw Error('containerInspect has failed');\n        return result;\n    }\n\n    async containerLogs(container: ContainerInfo, ...params: { key: string, value: string }[]): Promise<string> {\n        const result = await this.apiRequestText(`containers/${container.Id}/logs`, \"GET\", undefined, this.allLogs);\n        if (result === null)\n            throw Error('containerInspect has failed');\n        return result;\n    }\n\n    async containerRestart(container: ContainerInfo, ...params: { key: string, value: string }[]): Promise<void> {\n        await this.apiRequest(`containers/${container.Id}/restart`, \"POST\");\n    }\n\n    async containerStop(container: ContainerInfo, ...params: { key: string, value: string }[]): Promise<void> {\n        await this.apiRequest(`containers/${container.Id}/stop`, \"POST\");\n    }\n\n    async containerRm(container: ContainerInfo, ...params: { key: string, value: string }[]): Promise<void> {\n        await this.apiRequest(`containers/${container.Id}`, \"DELETE\", undefined, this.force);\n    }\n\n    async volumeLs(...params: { key: string, value: string }[]): Promise<VolumeList> {\n        const result = await this.apiRequestJson(`volumes`);\n        if (result === null)\n            throw Error('volumeLs has failed');\n        return result;\n    }\n\n    async volumeInpect(volume: VolumeInspectInfo, ...params: { key: string, value: string }[]): Promise<VolumeInspectInfo> {\n        const result = await this.apiRequestJson(`volumes/${volume.Name}`);\n        if (result === null)\n            throw Error('volumeInpect has failed');\n        return result;\n    }\n\n    async volumeRm(volume: VolumeInspectInfo, ...params: { key: string, value: string }[]): Promise<void> {\n        await this.apiRequest(`volumes/${volume.Name}`, \"DELETE\", undefined, this.force);\n    }\n\n    async ping(): Promise<boolean> {\n        const result = await this.apiRequestText(`_ping`);\n        return result === \"OK\";\n    }\n\n    async networkLs(...params: { key: string, value: string }[]): Promise<NetworkInspectInfo[]> {\n        const result = await this.apiRequestJson(`networks`);\n        if (result === null)\n            throw Error('networkLs has failed');\n        return result;\n    }\n\n    async networkInpect(network: NetworkInspectInfo, ...params: { key: string, value: string }[]): Promise<NetworkInspectInfo> {\n        const result = await this.apiRequestJson(`networks/${network.Name}`);\n        if (result === null)\n            throw Error('networkInpect has failed');\n        return result;\n    }\n\n    async networkRm(network: NetworkInspectInfo, ...params: { key: string, value: string }[]): Promise<void> {\n        await this.apiRequest(`networks/${network.Name}`, \"DELETE\");\n    }\n}\n\nexport default DockerApi;"],"sourceRoot":""}