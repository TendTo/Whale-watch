{"version":3,"sources":["components/Toast/Toast.tsx","context/DockerRemoteContext.tsx","util/responsive.ts","components/DockerImages/DockerImage.tsx","components/DockerImages/DockerImages.tsx","components/DockerNetworks/DockerNetwork.tsx","components/DockerNetworks/DockerNetworks.tsx","components/DockerVolumes/DockerVolume.tsx","components/DockerVolumes/DockerVolumes.tsx","components/DockerRemoteDetails/DockerRemoteDetails.tsx","components/DockerRemoteList/DockerRemoteList.tsx","components/DockerRemoteForm/DockerRemoteForm.tsx","components/MainNavbar/MainNavbar.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx","api/DockerApi.ts","api/BaseApi.ts","components/DockerContainers/DockerContainers.tsx","components/DockerContainers/DockerContainer.tsx"],"names":["toastComponentList","defaultOptions","time","className","position","renderDOM","container","document","getElementById","ReactDOM","render","classnames","map","t","timeout","classNames","component","id","Toast","message","contentClassName","clickable","onClick","messageDOM","useRef","useLayoutEffect","current","clientHeight","height","style","setTimeout","contentClassNames","filter","Boolean","join","clickableProps","tabIndex","role","ref","toast","timeOrOptions","undefined","console","error","Array","isArray","Date","now","push","index","findIndex","splice","requestErrorToast","e","errorMessage","slice","DockerRemoteContext","React","createContext","getSavedDockerRemote","savedData","localStorage","getItem","JSON","parse","DockerRemoteContextProvider","state","dockerRemotes","addDockerRemote","newDockerRemote","currentDockerRemotes","host","port","setItem","stringify","setState","removeDockerRemote","dockerRemoteKey","Provider","value","this","props","children","Component","contextType","getWindowDimension","width","window","innerWidth","documentElement","clientWidth","body","innerHeight","sizeConverter","size","dimension","toFixed","timeConverter","unixTime","a","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","getSeconds","DockerImage","data","image","layout","fetchImageLs","setImageDetails","useState","loading","setLoading","dockerApi","DockerApi","fromDockerRemoteData","onRun","containerCreate","then","catch","onInspect","imageInspect","details","onDelete","imageRm","colSpan","Spinner","animation","RepoTags","Id","Created","Size","Button","variant","disabled","detailsConverter","imageDetails","DockerImages","eventKey","currentEventKey","useContext","AccordionContext","imageLs","setImageLs","force","imageElements","idx","Card","Accordion","Toggle","as","Header","Collapse","Body","Form","Group","controlId","Label","Control","placeholder","required","input","inputValue","length","startsWith","imageCreate","scope","Modal","dialogClassName","show","onHide","closeButton","Title","DockerNetwork","network","fetchNetworkLs","setNetworksDetails","networkInpect","networkRm","Name","Driver","Scope","DockerNetworks","NetworkLs","setNetworkLs","NetworkDetails","log","networkLs","networkElements","DockerVolume","volume","fetchVolumeLs","setVolumeDetails","volumeInpect","volumeRm","Mountpoint","DockerVolumes","volumeLs","setVolumeLs","volumeDetails","Volumes","DockerRemoteDetails","dim","setDim","dockerRemoteContextData","params","useParams","dockerRemoteData","useEffect","addEventListener","removeEventListener","DockerContainers","DockerRemoteList","Object","entries","key","bg","border","Text","Row","Col","xs","protocol","to","DockerRemoteForm","defaultData","strings","placeholderHost","infoTooltip","Tooltip","location","useLocation","history","useHistory","setShow","fail","setFail","success","setSuccess","useTls","setUseTls","useForm","defaultValues","register","handleSubmit","reset","dockerRemoteContext","handleClose","onSubmit","pathname","Check","checked","type","label","onChange","OverlayTrigger","placement","delay","hide","overlay","hostInfoTooltip","portInfoTooltip","valueAsNumber","placeholderPort","Footer","onFail","ping","res","form","MainNavbar","Navbar","expand","Brand","Nav","href","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","all","allLogs","stderr","stdout","tail","Error","errMsg","status","statusText","json","errResponse","method","queryParams","apiRequest","ok","handleError","nameTag","matches","match","fromImage","tag","endsWith","apiRequestWrapper","result","replace","imageName","Image","text","response","url","baseUrl","queryStringify","request","headers","Headers","append","options","debug","fetch","obj","str","p","hasOwnProperty","encodeURIComponent","containerDetails","logs","containerLs","setContainerLs","setContainerDetails","containerLogs","setContainerLogs","fetchContainerLs","containersElements","name","split","header","Buffer","from","DockerContainer","containerRun","containerInspect","onLogs","Names","onRestart","containerRestart","onStop","containerStop","containerRm","Status"],"mappings":"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","file":"static/js/main.78bf056a.chunk.js","sourcesContent":["import React, { ReactElement, SyntheticEvent, useLayoutEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Toast.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nexport interface ToastOptions {\n  time?: number;\n  className?: string;\n  clickable?: boolean;\n  contentClassName?: string;\n  onClick?: (e: SyntheticEvent<HTMLDivElement>) => void | Promise<void>;\n}\n\nexport interface ConfigArgs extends Pick<ToastOptions, 'time' | 'className'> {\n  position?: 'left' | 'center' | 'right';\n}\n\nexport interface ToastProps extends Pick<ToastOptions, 'className' | 'clickable' | 'onClick' | 'contentClassName'> {\n  message: string;\n}\n\nlet toastComponentList: any[] = [];\nconst init = () => {\n  const toastContainer = document.getElementById('toast_container');\n  if (!toastContainer) {\n    console.error(\"No toast_container element\")\n  }\n  if (!toastComponentList || !Array.isArray(toastComponentList)) {\n    toastComponentList = [];\n  }\n};\n\nconst defaultOptions: Required<ConfigArgs> = {\n  time: 3000,\n  className: '',\n  position: 'center',\n};\n\nexport const toastConfig = (options: ConfigArgs) => {\n  if (options.time) defaultOptions.time = options.time;\n  if (options.className) defaultOptions.className = options.className;\n  if (options.position) defaultOptions.position = options.position;\n};\n\nconst renderDOM = () => {\n  const container = document.getElementById('toast_container');\n  const position = defaultOptions.position || 'center';\n\n  ReactDOM.render(\n    <div className={`toast-list ${position}`}>\n      <TransitionGroup classnames=\"list\">\n        {toastComponentList.map(t => (\n          <CSSTransition key={t.id} timeout={300} classNames=\"toast\">\n            {t.component}\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>,\n    container,\n  );\n};\n\nconst Toast = ({\n  message,\n  className,\n  contentClassName,\n  clickable,\n  onClick,\n}: ToastProps): ReactElement => {\n  const messageDOM: any = useRef();\n\n  useLayoutEffect(() => {\n    if (messageDOM.current && messageDOM.current.clientHeight) {\n      const height = messageDOM.current.clientHeight;\n      messageDOM.current.style.height = '0px';\n      setTimeout(() => {\n        if (messageDOM && messageDOM.current)\n          messageDOM.current.style.height = `${height}px`;\n      }, 0);\n    }\n  });\n\n  const contentClassNames = [\n    'toast-content',\n    clickable ? 'clickable' : '',\n    contentClassName\n  ].filter(Boolean).join(' ');\n\n  const clickableProps = {\n    onClick,\n    tabIndex: 0,\n    role: 'button',\n  };\n\n  return (\n    <div ref={messageDOM} className={`toast-message ${className}`}>\n      <div\n        className={contentClassNames}\n        {...clickable && clickableProps}\n      >\n        {message}\n      </div>\n    </div>\n  );\n};\n\nfunction toast(message: string, time?: number): void;\nfunction toast(message: string, options?: ToastOptions): void;\nfunction toast(message: string, timeOrOptions?: number | ToastOptions): void {\n  const {\n    time = defaultOptions.time,\n    clickable = false,\n    className = defaultOptions.className,\n    contentClassName = \"\",\n    onClick = undefined,\n  } = typeof timeOrOptions === 'number' ? { time: timeOrOptions } : (timeOrOptions || {});\n\n  init();\n  renderDOM();\n\n  const id = Date.now();\n  toastComponentList.push({\n    id,\n    component: (\n      <Toast\n        message={message}\n        className={className}\n        clickable={clickable}\n        onClick={onClick}\n        contentClassName={contentClassName}\n      />\n    ),\n  });\n\n  renderDOM();\n  setTimeout(() => {\n    const index = toastComponentList.findIndex(t => t.id === id);\n    toastComponentList.splice(index, 1);\n    renderDOM();\n  }, time);\n}\n\nexport function requestErrorToast(e: Error) {\n  console.error(e);\n  let contentClassName = \"text-danger\";\n  let errorMessage = \"An error has occurred.\";\n  switch (e.message.slice(0, 3)) {\n    case \"304\":\n      errorMessage = \"Nothing has changed.\"\n      contentClassName = \"text-warning\"\n      break;\n    case \"403\":\n      errorMessage = \"Forbidden operation.\"\n      break;\n    case \"404\":\n      errorMessage = \"Resource not found.\"\n      break;\n    case \"409\":\n      errorMessage = \"A conflict has emerged.\"\n      break;\n  }\n  toast(`${errorMessage}\\nCheck the logs to know more`, { contentClassName: contentClassName });\n}\n\nexport default toast;","import React from \"react\"\nimport { DockerRemoteData, DockerRemoteContextValue, DockerRemoteContextState } from '../types/DockerTypes';\n\nexport const DockerRemoteContext = React.createContext<DockerRemoteContextValue | null>(null);\n\nfunction getSavedDockerRemote() {\n    const savedData = localStorage.getItem('dockerRemote');\n    if (savedData === null)\n        return {}\n    return JSON.parse(savedData);\n}\n\nclass DockerRemoteContextProvider extends React.Component {\n    static override contextType = DockerRemoteContext;\n\n    override state: DockerRemoteContextState = {\n        dockerRemotes: (getSavedDockerRemote() as ({ [key: string]: DockerRemoteData }))\n    }\n\n    addDockerRemote = (newDockerRemote: DockerRemoteData) => {\n        const currentDockerRemotes = this.state.dockerRemotes;\n        currentDockerRemotes[`${newDockerRemote.host}:${newDockerRemote.port}`] = newDockerRemote;\n        localStorage.setItem('dockerRemote', JSON.stringify(currentDockerRemotes));\n        this.setState({ dockerRemotes: currentDockerRemotes });\n    }\n\n    removeDockerRemote = (dockerRemoteKey: string) => {\n        const currentDockerRemotes = this.state.dockerRemotes;\n        delete currentDockerRemotes[dockerRemoteKey];\n        localStorage.setItem('dockerRemote', JSON.stringify(currentDockerRemotes));\n        this.setState({ dockerRemotes: currentDockerRemotes });\n    }\n\n    override render() {\n        return (\n            <DockerRemoteContext.Provider value={{\n                dockerRemotes: this.state.dockerRemotes,\n                addDockerRemote: this.addDockerRemote,\n                removeDockerRemote: this.removeDockerRemote\n            }}>\n                {this.props.children}\n            </DockerRemoteContext.Provider>\n        );\n    }\n}\n\nexport default DockerRemoteContextProvider;","type deviceType = 'Mobile' | 'Tablet' | 'Desktop' | 'Laptop' | 'LargerThanLaptop' | 'Unknown';\ntype deviceTypeVariant = 'MobileSmall' | 'MobileMedium' | 'MobileLarge' | 'Tablet' | 'LaptopSmall' | 'LaptopLarge' | 'LargerThanLaptop' | 'LargeScreenMax' | 'Unknown';\ntype orientation = 'Portrait' | 'Landscape';\n\ninterface DeviceDetails {\n    deviceType: deviceType;\n    deviceTypeVariant?: deviceTypeVariant;\n    orientation: orientation;\n    width: number;\n    height: number;\n}\n\nconst DeviceWidthObject = {\n    MobileSmall: { max: 320, min: 0 },\n    MobileMedium: { max: 375, min: 321 },\n    MobileLarge: { max: 767, min: 376 },\n    Tablet: { max: 991, min: 768 },\n    LaptopSmall: { max: 1024, min: 992 },\n    LaptopLarge: { max: 1440, min: 1025 },\n    LargerThanLaptop: { max: 2560, min: 1441 },\n    LargeScreenMax: { max: 999999, min: 2561 }\n};\n\nconst BreakpointsByWidth = {\n    laptop_max: 1440,\n    laptop_min: 992,\n    tablet_min: 768,\n    tablet_max: 991,\n    mobile_max: 767,\n    default_min: 768 // Unrecognized device\n}\n\nconst MobileHeight = {\n    mobileLandscape_min: 320,\n    mobileLandscape_max: 425\n}\n\nexport const getWindowDimension = () => {\n    const width = window.innerWidth\n        || document.documentElement.clientWidth\n        || document.body.clientWidth;\n    const height = window.innerHeight\n        || document.documentElement.clientHeight\n        || document.body.clientHeight;\n    return { width, height }\n};\n\n\nexport const getDeviceTypeInfo = () => {\n    const { width, height } = getWindowDimension()\n    const buildDeviceDetails: DeviceDetails = {\n        deviceType: 'Unknown',\n        deviceTypeVariant: 'Unknown',\n        orientation: 'Portrait',\n        width: 0,\n        height: 0,\n    }\n    if (height < width) {\n        buildDeviceDetails.orientation = 'Landscape'\n\n        if (height <= MobileHeight.mobileLandscape_max)\n            buildDeviceDetails.deviceType = 'Mobile'\n        else if (width <= BreakpointsByWidth.tablet_max)\n            buildDeviceDetails.deviceType = 'Tablet'\n        else if (width <= BreakpointsByWidth.laptop_max)\n            buildDeviceDetails.deviceType = 'Laptop'\n        else if (width > BreakpointsByWidth.laptop_max)\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\n    } else {\n        buildDeviceDetails.orientation = 'Portrait'\n\n        if (width <= BreakpointsByWidth.mobile_max)\n            buildDeviceDetails.deviceType = 'Mobile'\n        else if (width <= BreakpointsByWidth.tablet_max)\n            buildDeviceDetails.deviceType = 'Tablet'\n        else if (width <= BreakpointsByWidth.laptop_max)\n            buildDeviceDetails.deviceType = 'Laptop'\n        else if (width > BreakpointsByWidth.laptop_max)\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\n    }\n\n    for (const [key, val] of Object.entries(DeviceWidthObject)) {\n        if (val.min <= height && height <= val.max) {\n            buildDeviceDetails.deviceTypeVariant = key as deviceTypeVariant;\n            break\n        }\n    }\n\n    return buildDeviceDetails\n}\n","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ImageInfo, ImageInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\n\ninterface Props {\n    layout: \"horizontal\" | \"vertical\"\n    key: number\n    data: DockerRemoteData\n    image: ImageInfo\n    fetchImageLs: (force?: boolean) => void\n    setImageDetails: (image: ImageInspectInfo) => void\n}\n\nfunction sizeConverter(size: number) {\n    const dimensions = ['B', 'KB', 'MB', 'GB', 'TB'];\n    for (let dimension of dimensions) {\n        if (size / 1000 < 1)\n            return `${size.toFixed(2)} ${dimension}`;\n        else\n            size /= 1000;\n    }\n    return `${size.toFixed(2)} TB`;\n}\n\nfunction timeConverter(unixTime: number) {\n    const a = new Date(unixTime * 1000);\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n}\n\nfunction DockerImage({ data, image, layout, fetchImageLs, setImageDetails }: Props) {\n    const [loading, setLoading] = useState(false);\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n    const onRun = () => {\n        dockerApi.containerCreate(image)\n            .then(() => toast(\"A new container has been created\"))\n            .catch(requestErrorToast);\n    }\n    const onInspect = () => {\n        dockerApi.imageInspect(image)\n            .then((details) => setImageDetails(details))\n            .catch(requestErrorToast);\n    }\n    const onDelete = () => {\n        dockerApi.imageRm(image)\n            .then(() => fetchImageLs(true))\n            .then(() => toast(\"The image has been deleted\"))\n            .catch(requestErrorToast);\n    }\n\n    return (\n        <>\n            {loading && (\n                <tr>\n                    <td colSpan={layout === \"horizontal\" ? 5 : 3}>\n                        <Spinner animation=\"border\" size=\"sm\" />\n                    </td>\n                </tr>\n            )}\n            {!loading && layout === \"horizontal\" && (\n                <tr>\n                    <td>{image.RepoTags}</td>\n                    <td className=\"DockerImages-image-id\">{image.Id.slice(7)}</td>\n                    <td>{timeConverter(image.Created)}</td>\n                    <td>{sizeConverter(image.Size)}</td>\n                    <td className=\"DockerImages-actions\" >\n                        <Button variant=\"success lg\" onClick={onRun} disabled={loading}>\n                            <i className=\"fa fa-play\"></i>\n                        </Button>\n                        <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                            <i className=\"fa fa-eye\"></i>\n                        </Button>\n                        <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </td>\n                </tr>\n            )}\n            {!loading && layout === \"vertical\" && (\n                <>\n                    <tr className=\"table-primary\">\n                        <th colSpan={1}>Name</th>\n                        <td colSpan={2}>{image.RepoTags}</td>\n                    </tr>\n                    <tr>\n                        <th>Image ID</th>\n                        <td className=\"DockerImages-image-id\" colSpan={2}>{image.Id.slice(7)}</td>\n                    </tr>\n                    <tr>\n                        <th>Created</th>\n                        <td colSpan={2}>{timeConverter(image.Created)}</td>\n                    </tr>\n                    <tr>\n                        <th>Size</th>\n                        <td colSpan={2}>{sizeConverter(image.Size)}</td>\n                    </tr>\n                    <tr>\n                        <th>Actions</th>\n                        <td className=\"DockerImages-actions\" colSpan={2}>\n                            <Button variant=\"success lg\" onClick={onRun} disabled={loading}>\n                                <i className=\"fa fa-play\"></i>\n                            </Button>\n                            <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                                <i className=\"fa fa-eye\"></i>\n                            </Button>\n                            <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                                <i className=\"fa fa-trash\"></i>\n                            </Button>\n                        </td>\n                    </tr>\n                </>\n            )}\n        </>\n    );\n}\n\nexport default DockerImage;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ImageInfo, ImageInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\nimport DockerImage from \"./DockerImage\";\nimport './DockerImages.css';\n\ninterface Props {\n    layout: 'vertical' | 'horizontal'\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction detailsConverter(imageDetails: ImageInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerImages({ data, eventKey, layout }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n\n    const [loading, setLoading] = useState(false);\n    const [imageLs, setImageLs] = useState<ImageInfo[]>();\n    const [imageDetails, setImageDetails] = useState<ImageInspectInfo>();\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n    const fetchImageLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.imageLs().then(setImageLs).catch(requestErrorToast);\n        }\n    }\n    const onPull = () => {\n        const input = (document.getElementById('dockerImages.tag') as HTMLInputElement);\n        const inputValue = input?.value;\n\n        if (inputValue === undefined || inputValue === null || inputValue.length === 0 || inputValue.startsWith(\":\"))\n            return toast(\"You must specify an image name to pull\", { contentClassName: \"text-danger\" })\n\n        input.value = \"\";\n        dockerApi.imageCreate(inputValue)\n            .then(() => toast(\"A new images is being pulled.\\nIt may take a while before it shows here\"))\n            .catch(requestErrorToast);\n    }\n\n    const imageElements = imageLs?.map((image, idx) =>\n        <DockerImage key={idx}\n            data={data}\n            image={image}\n            fetchImageLs={fetchImageLs}\n            setImageDetails={setImageDetails}\n            layout={layout}\n        ></DockerImage>\n    );\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchImageLs()}>\n                    <h5>Images</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <Form.Group className=\"DockerImages-form\" controlId=\"dockerImages.tag\">\n                            <Form.Label className=\"DockerImages-required-label\"><b>Pull image</b></Form.Label>\n                            <Form.Control placeholder=\"tag:latest\" required />\n                            <Button variant=\"primary\" onClick={onPull}>\n                                <i className=\"fa fa-download\"></i>\n                            </Button>\n                        </Form.Group>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && imageLs === undefined && <p>No images found</p>}\n                        {!loading && imageLs && (\n                            <table className=\"table table-hover\">\n                                {layout === \"horizontal\" &&\n                                    <thead>\n                                        <tr>\n                                            <th scope=\"col\">Name</th>\n                                            <th scope=\"col\">Image ID</th>\n                                            <th scope=\"col\">Created</th>\n                                            <th scope=\"col\">Size</th>\n                                            <th scope=\"col\">Actions</th>\n                                        </tr>\n                                    </thead>\n                                }\n                                <tbody>\n                                    {imageElements}\n                                </tbody>\n                            </table>\n                        )}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={imageDetails !== undefined} onHide={() => setImageDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{imageDetails?.RepoTags} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(imageDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerImages;","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { NetworkInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\n\ninterface Props {\n    key: number\n    data: DockerRemoteData\n    network: NetworkInspectInfo\n    fetchNetworkLs: (force?: boolean) => void\n    setNetworksDetails: (newtwork: NetworkInspectInfo) => void\n    layout: 'horizontal' | 'vertical'\n}\n\nfunction DockerNetwork({ data, network, layout, fetchNetworkLs, setNetworksDetails }: Props) {\n    const [loading, setLoading] = useState(false);\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n    const onInspect = () => {\n        dockerApi.networkInpect(network)\n            .then((details) => setNetworksDetails(details))\n            .catch(requestErrorToast)\n    }\n    const onDelete = () => {\n        dockerApi.networkRm(network)\n            .then(() => fetchNetworkLs(true))\n            .then(() => toast(\"The network has been deleted\"))\n            .catch(requestErrorToast)\n    }\n\n    return (\n        <>\n            {loading && (\n                <td colSpan={layout === \"horizontal\" ? 5 : 3}>\n                    <Spinner animation=\"border\" size=\"sm\" />\n                </td>\n            )}\n            {!loading && layout === \"horizontal\" && (\n                <tr>\n                    <td>{network.Name}</td>\n                    <td className=\"DockerNetworks-ellipsis\">{network.Id}</td>\n                    <td>{network.Driver}</td>\n                    <td>{network.Scope}</td>\n                    <td className=\"DockerNetworks-actions\" >\n                        <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                            <i className=\"fa fa-eye\"></i>\n                        </Button>\n                        <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </td>\n                </tr>\n            )}\n            {!loading && layout === \"vertical\" && (\n                <>\n                    <tr className=\"table-primary\">\n                        <th colSpan={1}>Network ID</th>\n                        <td colSpan={2}>{network.Name}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Name</th>\n                        <td colSpan={2} className=\"DockerNetworks-ellipsis\">{network.Id}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Driver</th>\n                        <td colSpan={2}>{network.Driver}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Scope</th>\n                        <td colSpan={2}>{network.Scope}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Actions</th>\n                        <td colSpan={2} className=\"DockerNetworks-actions\" >\n                            <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                                <i className=\"fa fa-eye\"></i>\n                            </Button>\n                            <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                                <i className=\"fa fa-trash\"></i>\n                            </Button>\n                        </td>\n                    </tr>\n                </>\n            )}\n        </>\n    );\n}\n\nexport default DockerNetwork;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { NetworkInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport { requestErrorToast } from \"../Toast/Toast\";\nimport DockerNetwork from \"./DockerNetwork\";\nimport './DockerNetworks.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n    layout: 'horizontal' | 'vertical'\n}\n\nfunction detailsConverter(imageDetails: NetworkInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerNetworks({ data, eventKey, layout }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [NetworkLs, setNetworkLs] = useState<NetworkInspectInfo[]>();\n    const [NetworkDetails, setNetworksDetails] = useState<NetworkInspectInfo>();\n\n    const fetchNetworkLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            console.log(\"FEST\");\n            dockerApi.networkLs()\n                .then(setNetworkLs)\n                .catch(requestErrorToast);\n        }\n    }\n\n    const networkElements = NetworkLs?.map((network, idx) =>\n        <DockerNetwork key={idx}\n            network={network}\n            data={data}\n            fetchNetworkLs={fetchNetworkLs}\n            setNetworksDetails={setNetworksDetails}\n            layout={layout}\n        ></DockerNetwork>\n    );\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle id=\"acc-networks\" as={Card.Header} eventKey={eventKey} onClick={() => fetchNetworkLs()}>\n                    <h5>Networks</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && NetworkLs === undefined && <p>No networks found</p>}\n                        {!loading && NetworkLs && (\n                            <table className=\"table table-hover\">\n                                {layout === \"horizontal\" &&\n                                    <thead>\n                                        <tr>\n                                            <th scope=\"col\">Network ID</th>\n                                            <th scope=\"col\">Name</th>\n                                            <th scope=\"col\">Driver</th>\n                                            <th scope=\"col\">Scope</th>\n                                            <th scope=\"col\">Actions</th>\n                                        </tr>\n                                    </thead>\n                                }\n                                <tbody>\n                                    {networkElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={NetworkDetails !== undefined} onHide={() => setNetworksDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{NetworkDetails?.Name} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(NetworkDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerNetworks;","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { VolumeInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\n\ninterface Props {\n    key: number\n    data: DockerRemoteData\n    volume: VolumeInspectInfo\n    fetchVolumeLs: (force?: boolean) => void\n    setVolumeDetails: (volume: VolumeInspectInfo) => void\n    layout: 'horizontal' | 'vertical'\n}\n\nfunction DockerVolume({ data, volume, layout, fetchVolumeLs, setVolumeDetails }: Props) {\n    const [loading, setLoading] = useState(false);\n    const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n\n    const onInspect = () => {\n        dockerApi.volumeInpect(volume)\n            .then((details) => setVolumeDetails(details))\n            .catch(requestErrorToast);\n    }\n    const onDelete = () => {\n        dockerApi.volumeRm(volume)\n            .then(() => fetchVolumeLs(true))\n            .then(() => toast(\"The volume has been deleted\"))\n            .catch(requestErrorToast);\n    }\n\n    return (\n        <>\n            {loading && (\n                <tr>\n                    <td colSpan={layout === \"horizontal\" ? 4 : 3}>\n                        <Spinner animation=\"border\" size=\"sm\" />\n                    </td>\n                </tr>\n            )}\n            {!loading && layout === \"horizontal\" && (\n                <tr>\n                    <td className=\"DockerVolumes-name\">{volume.Name}</td>\n                    <td>{volume.Driver}</td>\n                    <td className=\"DockerVolumes-name\">{volume.Mountpoint}</td>\n                    <td className=\"DockerVolumes-actions\" >\n                        <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                            <i className=\"fa fa-eye\"></i>\n                        </Button>\n                        <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </td>\n                </tr>\n            )}\n            {!loading && layout === \"vertical\" && (\n                <>\n                    <tr className=\"table-primary\">\n                        <th colSpan={1}>Name</th>\n                        <td colSpan={2} className=\"DockerVolumes-name\">{volume.Name}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Driver</th>\n                        <td colSpan={2}>{volume.Driver}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Mountpoint</th>\n                        <td colSpan={2} className=\"DockerVolumes-name\">{volume.Mountpoint}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Actions</th>\n                        <td colSpan={2} className=\"DockerVolumes-actions\" >\n                            <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                                <i className=\"fa fa-eye\"></i>\n                            </Button>\n                            <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                                <i className=\"fa fa-trash\"></i>\n                            </Button>\n                        </td>\n                    </tr>\n                </>\n            )}\n        </>\n    );\n}\n\nexport default DockerVolume;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { VolumeInspectInfo, VolumeList } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport { requestErrorToast } from \"../Toast/Toast\";\nimport DockerVolume from \"./DockerVolume\";\nimport './DockerVolumes.css';\n\ninterface Props {\n    layout: 'horizontal' | 'vertical';\n    eventKey: string\n    data: DockerRemoteData\n}\n\nfunction detailsConverter(imageDetails: VolumeInspectInfo | undefined) {\n    if (imageDetails === undefined)\n        return \"\"\n    return JSON.stringify(imageDetails, null, 4);\n}\n\nfunction DockerVolumes({ data, eventKey, layout }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [volumeLs, setVolumeLs] = useState<VolumeList>();\n    const [volumeDetails, setVolumeDetails] = useState<VolumeInspectInfo>();\n\n    const fetchVolumeLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.volumeLs().then(setVolumeLs).catch(requestErrorToast);\n        }\n    }\n\n    const imageElements = volumeLs?.Volumes.map((volume, idx) =>\n        <DockerVolume key={idx}\n            volume={volume}\n            data={data}\n            fetchVolumeLs={fetchVolumeLs}\n            setVolumeDetails={setVolumeDetails}\n            layout={layout}\n        ></DockerVolume>\n    );\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchVolumeLs()}>\n                    <h5>Volumes</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && volumeLs === undefined && <p>No volumes found</p>}\n                        {!loading && volumeLs && (\n                            <table className=\"table table-hover\">\n                                {layout === \"horizontal\" &&\n                                    <thead>\n                                        <tr>\n                                            <th scope=\"col\">Name</th>\n                                            <th scope=\"col\">Driver</th>\n                                            <th scope=\"col\">Mountpoint</th>\n                                            <th scope=\"col\">Actions</th>\n                                        </tr>\n                                    </thead>\n                                }\n                                <tbody>\n                                    {imageElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={volumeDetails !== undefined} onHide={() => setVolumeDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{volumeDetails?.Name} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(volumeDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerVolumes;","import React, { useContext, useEffect, useState } from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport { useParams } from 'react-router-dom';\nimport { DockerRemoteContext } from \"../../context/DockerRemoteContext\";\nimport { DockerRemoteKey } from '../../types/DockerTypes';\nimport { getWindowDimension } from \"../../util/responsive\";\nimport DockerContainers from \"../DockerContainers/DockerContainers\";\nimport DockerImages from \"../DockerImages/DockerImages\";\nimport DockerNetworks from \"../DockerNetworks/DockerNetworks\";\nimport DockerVolumes from \"../DockerVolumes/DockerVolumes\";\n\nfunction DockerRemoteDetails() {\n    const [dim, setDim] = useState(getWindowDimension());\n    const dockerRemoteContextData = useContext(DockerRemoteContext);\n    const params = useParams<DockerRemoteKey>();\n    const dockerRemoteData = dockerRemoteContextData?.dockerRemotes[params.dockerRemoteKey];\n\n    const layout = dim.width < 992 ? \"vertical\" : \"horizontal\";\n\n    useEffect(() => {\n        window.addEventListener('resize', () => setDim(getWindowDimension()));\n        return () => window.removeEventListener('resize', () => setDim(getWindowDimension()));\n    }, []);\n\n    if (dockerRemoteData === undefined) {\n        return (\n            <>\n                <h3>ERROR 404</h3>\n                <p>The Docker remote you specified was not found</p>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <h4>{`${dockerRemoteData.host}:${dockerRemoteData.port}`}</h4>\n            <Accordion >\n                <DockerImages layout={layout} data={dockerRemoteData} eventKey=\"0\" />\n                <DockerContainers layout={layout} data={dockerRemoteData} eventKey=\"1\"></DockerContainers>\n                <DockerVolumes layout={layout} data={dockerRemoteData} eventKey=\"2\"></DockerVolumes>\n                <DockerNetworks layout={layout} data={dockerRemoteData} eventKey=\"3\"></DockerNetworks>\n            </Accordion>\n        </>\n    );\n}\n\nexport default DockerRemoteDetails;","import React, { useContext } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport { Link } from 'react-router-dom';\nimport { DockerRemoteContext } from \"../../context/DockerRemoteContext\";\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport './DockerRemoteList.css';\n\nfunction DockerRemoteList() {\n    const dockerRemoteContextData = useContext(DockerRemoteContext);\n\n    let dockerRemoteData: [string, DockerRemoteData][] = [];\n    if (dockerRemoteContextData !== null)\n        dockerRemoteData = Object.entries(dockerRemoteContextData.dockerRemotes);\n\n    const dockerRemotes = dockerRemoteData.map(e => {\n        const [key, value] = e;\n        return (\n            <Card bg=\"dark\" key={key} border=\"primary\" className=\"mb-3\">\n                <Card.Header><h5>{value.host}</h5></Card.Header>\n                <Card.Body>\n                    <Card.Text as={\"div\"}>\n                        <Row>\n                            <Col xs={9}>\n                                Port: <b>{value.port}</b><br></br>\n                                Connection: <b>{value.protocol}</b><br></br>\n                            </Col>\n                            <Col className=\"DockerRemoteList-buttons\" xs={2}>\n                                <Link to={key}>\n                                    <Button variant=\"primary lg\">\n                                        <i className=\"fa fa-eye\"></i>\n                                    </Button>\n                                </Link>\n                                <Button variant=\"danger lg\" onClick={() => dockerRemoteContextData?.removeDockerRemote(key)}>\n                                    <i className=\"fa fa-trash\"></i>\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        )\n    });\n\n    return (\n        <>\n            {dockerRemotes && (\n                <div className=\"DockerRemoteList-CardDeck\">\n                    {dockerRemotes}\n                </div>\n            )}\n            {dockerRemotes.length === 0 && (\n                <p>\n                    No remote Docker instances found :(\n                </p>\n            )}\n        </>\n\n    );\n}\n\nexport default DockerRemoteList;","import React, { useContext, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { DockerRemoteContext } from '../../context/DockerRemoteContext';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport './DockerRemoteForm.css';\nimport strings from './DockerRemoteForm.json';\n\nfunction DockerRemoteForm() {\n    const defaultData = { port: 2375, host: strings.placeholderHost };\n    const infoTooltip = (\n        <Tooltip id=\"infoTooltip\">\n            {strings.infoTooltip}\n        </Tooltip>\n    );\n\n    const location = useLocation();\n    const history = useHistory();\n\n    const [show, setShow] = useState(false);\n    const [fail, setFail] = useState(false);\n    const [success, setSuccess] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [useTls, setUseTls] = useState(true);\n    const { register, handleSubmit, reset } = useForm({ defaultValues: defaultData });\n    const dockerRemoteContext = useContext(DockerRemoteContext);\n\n    const handleOpen = () => setShow(true);\n    const handleClose = () => { setSuccess(false); setFail(false); reset(defaultData); setShow(false); };\n\n    const onTest = (data: DockerRemoteData) => {\n        data.protocol = useTls ? \"https\" : \"http\";\n\n        const onFail = () => {\n            setSuccess(false);\n            setFail(true);\n        }\n\n        const onSuccess = () => {\n            setFail(false);\n            setSuccess(true);\n        }\n\n        const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n        dockerApi.ping()\n            .then((res) => res ? onSuccess() : onFail())\n            .catch(onFail);\n    }\n\n    const onSubmit = (data: DockerRemoteData) => {\n        data.protocol = useTls ? \"https\" : \"http\";\n        dockerRemoteContext?.addDockerRemote(data);\n        handleClose();\n        if (location.pathname !== \"/\")\n            history.push(\"/\");\n    };\n\n    return (\n        <>\n            <Button variant=\"success\" onClick={handleOpen}>\n                <i className=\"fa fa-plus\"></i>&nbsp;&nbsp;\n                Add Docker remote\n            </Button>\n\n            <Modal dialogClassName=\"modal-lg\" show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add a new Docker remote</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n\n                    <Form id=\"dockerRemoteForm\" onSubmit={handleSubmit(onSubmit)}>\n                        <Row>\n                            <Col xs={11}>\n                                <Form.Group controlId=\"dockerRemoteForm.local\">\n                                    <Form.Check\n                                        checked={useTls}\n                                        type=\"switch\"\n                                        id=\"dockerRemoteForm.local\"\n                                        label={useTls ? \"Using HTTPS\" : \"Using HTTP\"}\n                                        onChange={() => setUseTls(!useTls)}\n                                    />\n                                </Form.Group>\n                            </Col>\n                            <Col xs={1}>\n                                <OverlayTrigger placement=\"left\" delay={{ show: 150, hide: 300 }} overlay={infoTooltip}>\n                                    <i className=\"fa fa-2x fa-question-circle\"></i>\n                                </OverlayTrigger>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col xs=\"6\">\n                                <Form.Group controlId=\"dockerRemoteForm.host\">\n                                    <Form.Label className=\"DockerRemoteForm-required-label info-tooltip\">Remote hostname or IP address\n                                        <span className=\"tooltip-text\">{strings.hostInfoTooltip}</span>\n                                    </Form.Label>\n                                    <Form.Control {...register(\"host\")} type=\"text\" placeholder={strings.placeholderHost} required />\n                                </Form.Group>\n                            </Col>\n                            <Col xs=\"3\">\n                                <Form.Group controlId=\"dockerRemoteForm.port\">\n                                    <Form.Label className=\"DockerRemoteForm-required-label info-tooltip\">Remote port\n                                        <span className=\"tooltip-text\">{strings.portInfoTooltip}</span>\n                                    </Form.Label>\n                                    <Form.Control {...register(\"port\", { valueAsNumber: true })} type=\"number\" placeholder={strings.placeholderPort} required />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    {fail && !loading && (\n                        <p className=\"text-danger\">Could not connect to the Docker remote daemon</p>\n                    )}\n                    {success && !loading && (\n                        <p className=\"text-success\">Connection successfully enstablished</p>\n                    )}\n\n                    <Button variant=\"warning\" onClick={handleSubmit(onTest)} disabled={loading}>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && \"Test connection\"}\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" form=\"dockerRemoteForm\">\n                        Add\n                    </Button>\n                </Modal.Footer>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerRemoteForm;","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Link } from 'react-router-dom';\nimport DockerRemoteForm from \"../DockerRemoteForm/DockerRemoteForm\";\nimport './MainNav.css';\n\nfunction MainNavbar() {\n    return (\n        <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand><Link className=\"navbar-brand\" to=\"/\">Whale watch</Link></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <DockerRemoteForm></DockerRemoteForm>\n                </Nav>\n                <Button href=\"https://github.com/TendTo/Whale-watch\" variant=\"outline-light\"><i className=\"fa fa-github\"></i></Button>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default MainNavbar;","import React from 'react';\nimport {\n  HashRouter as Router, Route, Switch\n} from 'react-router-dom';\nimport DockerRemoteContextProvider from '../../context/DockerRemoteContext';\nimport DockerRemoteDetails from '../DockerRemoteDetails/DockerRemoteDetails';\nimport DockerRemoteList from '../DockerRemoteList/DockerRemoteList';\nimport MainNavbar from '../MainNavbar/MainNavbar';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <DockerRemoteContextProvider>\n          <MainNavbar></MainNavbar>\n          <div className=\"App-main\">\n            <Switch>\n              <Route exact path=\"/\" children={<DockerRemoteList />} />\n              <Route exact path=\"/:dockerRemoteKey\" children={<DockerRemoteDetails />} />\n            </Switch>\n          </div>\n        </DockerRemoteContextProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './bootstrap.css';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { DockerRemoteData } from '../types/DockerTypes'\nimport { ImageInfo, NetworkInspectInfo, ImageRemoveInfo, ImageInspectInfo, ServiceCreateResponse, ContainerInfo, ContainerInspectInfo, VolumeInspectInfo, VolumeList } from '../types/DockerApiTypes'\nimport BaseApi from './BaseApi';\n\ntype queryParams = {\n    [key: string]: any\n}\n\nclass DockerApi extends BaseApi {\n    private readonly force = { force: \"true\" };\n    private readonly all = { all: \"true\" };\n    private readonly allLogs = { stderr: \"true\", stdout: \"true\", tail: 100 };\n\n    static fromDockerRemoteData(data: DockerRemoteData, setLoading: (isLoading: boolean) => void) {\n        return new DockerApi(data.protocol, data.host, data.port, setLoading);\n    }\n\n    constructor(\n        protocol: \"https\" | \"http\",\n        host: string,\n        port: number,\n        public setLoading?: (isLoading: boolean) => void\n    ) {\n        super(protocol, host, port);\n    }\n\n    protected override async handleError(error: Response) {\n        if (error === undefined || error === null) throw Error(\"No response\");\n        let errMsg: string = error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        try {\n            const errResponse = await error.json() as {message: string};\n            errMsg = errResponse.message || errMsg;\n        } catch (e) { }\n        throw Error(errMsg);\n    }\n\n    private async apiRequestWrapper(path: string, method: string = \"GET\", queryParams?: queryParams, body?: queryParams) {\n        if (this.setLoading) this.setLoading(true);\n        try {\n            const res = await this.apiRequest(path, method, queryParams, body);\n            if (res === undefined || res === null || !res.ok) await this.handleError(res);\n            if (this.setLoading) this.setLoading(false);\n            return res;\n        } catch (e) {\n            if (this.setLoading) this.setLoading(false);\n            throw e;\n        }\n    }\n\n    async imageCreate(nameTag: string): Promise<void> {\n        const matches = nameTag.match(/(.*?)(:[^:]+)?$/);\n        if (matches === null || matches.length < 2) {\n            throw Error(\"404 - imageCreate has failed\");\n        }\n        let fromImage = matches[1] || \"\";\n        let tag = matches[2] || \"latest\";\n        fromImage = fromImage.endsWith(\":\") ? fromImage.slice(0, -1) : fromImage;\n        tag = tag.startsWith(\":\") ? tag.slice(1) : tag;\n        await this.apiRequestWrapper(\"images/create\", \"POST\", { fromImage: fromImage, tag: tag });\n    }\n\n    async imageLs(): Promise<ImageInfo[]> {\n        const result = await this.apiRequestWrapper(\"images/json\");\n        return await result.json();\n    }\n\n    async imageInspect(image: ImageInfo): Promise<ImageInspectInfo> {\n        const result = await this.apiRequestWrapper(`images/${image.Id.replace(\"sha256:\", \"\")}/json`);\n        return await result.json();\n    }\n\n    async imageRm(image: ImageInfo): Promise<ImageRemoveInfo[]> {\n        const result = await this.apiRequestWrapper(`images/${image.Id.replace(\"sha256:\", \"\")}`, \"DELETE\", this.force);\n        return await result.json();\n    }\n\n    async containerCreate(image: ImageInfo): Promise<ServiceCreateResponse> {\n        const imageName = image.RepoTags ? image.RepoTags[0] : image.Id.slice(7);\n        const result = await this.apiRequestWrapper(`containers/create`, \"POST\", undefined, { Image: imageName });\n        return await result.json();\n    }\n\n    async containerRun(container: ContainerInfo): Promise<void> {\n        await this.apiRequestWrapper(`containers/${container.Id}/start`, \"POST\");\n    }\n\n    async containerLs(...params: { key: string, value: string }[]): Promise<ContainerInfo[]> {\n        const result = await this.apiRequestWrapper(`containers/json`, \"GET\", this.all);\n        return await result.json();\n    }\n\n    async containerInspect(container: ContainerInfo): Promise<ContainerInspectInfo> {\n        const result = await this.apiRequestWrapper(`containers/${container.Id}/json`);\n        return await result.json();\n    }\n\n    async containerLogs(container: ContainerInfo): Promise<string> {\n        const result = await this.apiRequestWrapper(`containers/${container.Id}/logs`, \"GET\", this.allLogs);\n        return await result.text();\n    }\n\n    async containerRestart(container: ContainerInfo): Promise<void> {\n        await this.apiRequestWrapper(`containers/${container.Id}/restart`, \"POST\");\n    }\n\n    async containerStop(container: ContainerInfo): Promise<void> {\n        await this.apiRequestWrapper(`containers/${container.Id}/stop`, \"POST\");\n    }\n\n    async containerRm(container: ContainerInfo): Promise<void> {\n        await this.apiRequestWrapper(`containers/${container.Id}`, \"DELETE\", this.force);\n    }\n\n    async volumeLs(...params: { key: string, value: string }[]): Promise<VolumeList> {\n        const result = await this.apiRequestWrapper(`volumes`);\n        return await result.json();\n    }\n\n    async volumeInpect(volume: VolumeInspectInfo): Promise<VolumeInspectInfo> {\n        const result = await this.apiRequestWrapper(`volumes/${volume.Name}`);\n        return await result.json();\n    }\n\n    async volumeRm(volume: VolumeInspectInfo): Promise<void> {\n        await this.apiRequestWrapper(`volumes/${volume.Name}`, \"DELETE\", this.force);\n    }\n\n    async ping(): Promise<boolean> {\n        const result = await this.apiRequestWrapper(`_ping`);\n        const response = await result.text();\n        return response === \"OK\";\n    }\n\n    async networkLs(...params: { key: string, value: string }[]): Promise<NetworkInspectInfo[]> {\n        const result = await this.apiRequestWrapper(`networks`);\n        return await result.json();\n    }\n\n    async networkInpect(network: NetworkInspectInfo): Promise<NetworkInspectInfo> {\n        const result = await this.apiRequestWrapper(`networks/${network.Name}`);\n        return await result.json();\n    }\n\n    async networkRm(network: NetworkInspectInfo): Promise<void> {\n        await this.apiRequestWrapper(`networks/${network.Name}`, \"DELETE\");\n    }\n}\n\nexport default DockerApi;","export type genericObject = {\n    [key: string]: any\n};\n\nclass BaseApi {\n    constructor(public protocol: \"https\" | \"http\", public host: string, public port: number) { }\n\n    get baseUrl(): string {\n        return `${this.protocol}://${this.host}${this.port ? \":\" + this.port : \"\"}`\n    }\n\n    protected apiRequest(path?: string, method: string = \"GET\", queryParams?: genericObject, body?: genericObject) {\n        let url = path ? `${this.baseUrl}/${path}` : this.baseUrl;\n        if (queryParams) {\n            url += `?${this.queryStringify(queryParams)}`;\n        }\n        return this.request(url, method, body);\n    }\n\n    private request(url: string, method: string = \"GET\", body?: genericObject) {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        let options: RequestInit = { headers: headers, method: method };\n        if (body) {\n            options.body = JSON.stringify(body);\n        }\n\n        console.debug(`Fetch - ${method} - ${url}`);\n        return fetch(url, options);\n    }\n\n    protected handleError(error: Response) {\n        if (error === undefined || error === null) throw Error(\"No response\");\n        const errMsg = error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg);\n        throw Error(errMsg);\n    }\n\n    private queryStringify(obj: genericObject) {\n        let str = [];\n        for (let p in obj) {\n            if (obj.hasOwnProperty(p) && obj[p] !== null && obj[p] !== undefined) {\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join(\"&\");\n    }\n}\nexport default BaseApi;","import React, { useContext, useState } from \"react\";\nimport { AccordionContext } from \"react-bootstrap\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ContainerInfo, ContainerInspectInfo } from '../../types/DockerApiTypes';\nimport { DockerRemoteData } from '../../types/DockerTypes';\nimport { requestErrorToast } from \"../Toast/Toast\";\nimport DockerContainer from \"./DockerContainer\";\nimport './DockerContainers.css';\n\ninterface Props {\n    eventKey: string\n    data: DockerRemoteData\n    layout: 'horizontal' | 'vertical'\n}\n\nfunction detailsConverter(containerDetails: ContainerInspectInfo | undefined) {\n    if (containerDetails === undefined)\n        return \"\"\n    return JSON.stringify(containerDetails, null, 4);\n}\n\nfunction logsConverter(logs: string | undefined) {\n    if (logs === undefined)\n        return \"\"\n    return logs.split(\"\\n\")\n        .map(e => ({ header: Buffer.from(e.slice(0, 8)), text: e }))\n        .filter(({ header, text }) => header[0] !== 0)\n        .map(({ header, text }, idx) =>\n            <p key={idx} className={`DockerContainers-logs ${header[0] === 2 ? \"text-danger\" : \"\"}`}>{header[0] === 1 || header[0] === 2 ? text.slice(8) : text}</p>\n        )\n}\n\nfunction DockerContainers({ data, eventKey, layout }: Props) {\n    const currentEventKey = useContext(AccordionContext);\n    const [loading, setLoading] = useState(false);\n    const [containerLs, setContainerLs] = useState<ContainerInfo[]>();\n    const [containerDetails, setContainerDetails] = useState<ContainerInspectInfo>();\n    const [containerLogs, setContainerLogs] = useState<{ name: string, logs: string }>();\n\n    const fetchContainerLs = (force = false) => {\n        if (currentEventKey !== eventKey || force) {\n            const dockerApi = DockerApi.fromDockerRemoteData(data, setLoading);\n            dockerApi.containerLs().then(setContainerLs).catch(requestErrorToast);\n        }\n    }\n\n    const containersElements = containerLs?.map((container, idx) =>\n        <DockerContainer key={idx}\n            container={container}\n            data={data}\n            fetchContainerLs={fetchContainerLs}\n            setContainerDetails={setContainerDetails}\n            setContainerLogs={setContainerLogs}\n            layout={layout}\n        ></DockerContainer>\n    );\n\n    return (\n        <>\n            <Card>\n                <Accordion.Toggle as={Card.Header} eventKey={eventKey} onClick={() => fetchContainerLs()}>\n                    <h5>Containers</h5>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        {loading && <Spinner animation=\"border\" size=\"sm\" />}\n                        {!loading && containerLs === undefined && <p>No containers found</p>}\n                        {!loading && containerLs && (\n                            <table className=\"table table-hover\">\n                                {layout === \"horizontal\" &&\n                                    <thead>\n                                        <tr>\n                                            <th scope=\"col\">Name</th>\n                                            <th scope=\"col\">Image Tag</th>\n                                            <th scope=\"col\">Created</th>\n                                            <th scope=\"col\">Status</th>\n                                            <th scope=\"col\">Actions</th>\n                                        </tr>\n                                    </thead>\n                                }\n                                <tbody>\n                                    {containersElements}\n                                </tbody>\n                            </table>)}\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            <Modal dialogClassName=\"modal-lg\" show={containerDetails !== undefined} onHide={() => setContainerDetails(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{containerDetails?.Name.slice(1)} details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {detailsConverter(containerDetails)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n            <Modal dialogClassName=\"modal-lg\" show={containerLogs !== undefined} onHide={() => setContainerLogs(undefined)}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{containerLogs?.name.slice(1)} logs</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <pre>\n                        <code>\n                            {logsConverter(containerLogs?.logs)}\n                        </code>\n                    </pre>\n                </Modal.Body>\n            </Modal >\n        </>\n    );\n}\n\nexport default DockerContainers;","import React, { useEffect, useRef, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport DockerApi from \"../../api/DockerApi\";\nimport { ContainerInfo, ContainerInspectInfo } from \"../../types/DockerApiTypes\";\nimport { DockerRemoteData } from \"../../types/DockerTypes\";\nimport toast, { requestErrorToast } from \"../Toast/Toast\";\n\ntype ContainerLogs = { name: string, logs: string }\n\ninterface Props {\n    key: number\n    data: DockerRemoteData\n    container: ContainerInfo\n    fetchContainerLs: (force?: boolean) => void\n    setContainerDetails: (container: ContainerInspectInfo) => void\n    setContainerLogs: (logs: ContainerLogs) => void\n    layout: 'horizontal' | 'vertical'\n}\n\nfunction timeConverter(unixTime: number) {\n    const a = new Date(unixTime * 1000);\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n}\n\nfunction DockerContainer({ data, container, layout, fetchContainerLs, setContainerDetails, setContainerLogs }: Props) {\n    const [loading, setLoading] = useState(false);\n    const dockerApi = useRef(DockerApi.fromDockerRemoteData(data, setLoading));\n\n    useEffect(() => {\n        DockerApi.fromDockerRemoteData(data, setLoading)\n    }, [data, setLoading]);\n\n    const onRun = () => {\n        dockerApi.current.containerRun(container)\n            .then(() => fetchContainerLs(true))\n            .then(() => toast(\"A new container has started running\"))\n            .catch(requestErrorToast);\n    }\n    const onInspect = () => {\n        dockerApi.current.containerInspect(container)\n            .then(setContainerDetails)\n            .catch(requestErrorToast);\n    }\n    const onLogs = () => {\n        dockerApi.current.containerLogs(container)\n            .then((logs) => setContainerLogs({ name: container.Names ? container.Names[0] : container.Id, logs: logs }))\n            .catch(requestErrorToast);\n    }\n    const onRestart = () => {\n        dockerApi.current.containerRestart(container)\n            .then(() => fetchContainerLs(true))\n            .then(() => toast(\"The container has been restarted\"))\n            .catch(requestErrorToast);\n    }\n    const onStop = () => {\n        dockerApi.current.containerStop(container)\n            .then(() => fetchContainerLs(true))\n            .then(() => toast(\"The container has been stopped\"))\n            .catch(requestErrorToast);\n    }\n    const onDelete = () => {\n        dockerApi.current.containerRm(container)\n            .then(() => fetchContainerLs(true))\n            .then(() => toast(\"The container has been deleted\"))\n            .catch(requestErrorToast);\n    }\n\n    return (\n        <>\n            {loading && (\n                <tr>\n                    <td colSpan={layout === \"horizontal\" ? 5 : 3}>\n                        <Spinner animation=\"border\" size=\"sm\" />\n                    </td>\n                </tr>\n            )}\n            {!loading && layout === \"horizontal\" && (\n                <tr>\n                    <td>{container.Names.map(e => e.slice(1))}</td>\n                    <td>{container.Image}</td>\n                    <td>{timeConverter(container.Created)}</td>\n                    <td>{container.Status}</td>\n                    <td className=\"DockerContainers-actions\" >\n                        <Button variant=\"success lg\" onClick={onRun} disabled={loading}>\n                            <i className=\"fa fa-play\"></i>\n                        </Button>\n                        <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                            <i className=\"fa fa-eye\"></i>\n                        </Button>\n                        <Button variant=\"light lg\" onClick={onLogs} disabled={loading}>\n                            <i className=\"fa fa-file-text-o\"></i>\n                        </Button>\n                        <Button variant=\"primary lg\" onClick={onRestart} disabled={loading}>\n                            <i className=\"fa fa-refresh\"></i>\n                        </Button>\n                        <Button variant=\"warning lg\" onClick={onStop} disabled={loading}>\n                            <i className=\"fa fa-stop\"></i>\n                        </Button>\n                        <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                            <i className=\"fa fa-trash\"></i>\n                        </Button>\n                    </td>\n                </tr>\n            )}\n            {!loading && layout === \"vertical\" && (\n                <>\n                    <tr className=\"table-primary\">\n                        <th colSpan={1}>Name</th>\n                        <td colSpan={2}>{container.Names.map(e => e.slice(1))}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Image Tag</th>\n                        <td colSpan={2}>{container.Image}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Created</th>\n                        <td colSpan={2}>{timeConverter(container.Created)}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Status</th>\n                        <td colSpan={2}>{container.Status}</td>\n                    </tr>\n                    <tr>\n                        <th colSpan={1}>Actions</th>\n                        <td colSpan={2} className=\"DockerContainers-actions\" >\n                            <Button variant=\"success lg\" onClick={onRun} disabled={loading}>\n                                <i className=\"fa fa-play\"></i>\n                            </Button>\n                            <Button variant=\"info lg\" onClick={onInspect} disabled={loading}>\n                                <i className=\"fa fa-eye\"></i>\n                            </Button>\n                            <Button variant=\"light lg\" onClick={onLogs} disabled={loading}>\n                                <i className=\"fa fa-file-text-o\"></i>\n                            </Button>\n                            <Button variant=\"primary lg\" onClick={onRestart} disabled={loading}>\n                                <i className=\"fa fa-refresh\"></i>\n                            </Button>\n                            <Button variant=\"warning lg\" onClick={onStop} disabled={loading}>\n                                <i className=\"fa fa-stop\"></i>\n                            </Button>\n                            <Button variant=\"danger lg\" onClick={onDelete} disabled={loading}>\n                                <i className=\"fa fa-trash\"></i>\n                            </Button>\n                        </td>\n                    </tr>\n                </>\n            )}\n        </>\n    );\n}\n\nexport default DockerContainer;"],"sourceRoot":""}